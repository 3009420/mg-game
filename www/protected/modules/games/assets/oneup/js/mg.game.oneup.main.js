MG_GAME_ONEUP = function ($) {
    return $.extend(MG_GAME_API, {
        wordField:null,
        submitButton:null,
        media:null,
        licence_info:[],
        more_info:null,
        levels:[],
        level:1,
        words:[],
        sound: {},
        sounds: {},
        user: {},
        opponent_id: {},
        opponent_name: {},
        pass_game_id: null,
        institution_id: null,
        back_location: null,
        /*
         * initialize the game. called from inline script generated by the view
         */
        init: function (options) {
            var settings = $.extend(options, {
                ongameinit: MG_GAME_ONEUP.ongameinit
            });
            MG_GAME_API.game_init(settings);
            var game_assets_uri = $("#game_assets_uri").val();

            MG_GAME_ONEUP.sounds = {
                fail_sound: game_assets_uri + 'audio/sound_fail.mp3',
                next_level: game_assets_uri + 'audio/nextlevel.mp3',
                try_again : game_assets_uri + 'audio/tryagain.mp3'
            };

            $.each(MG_GAME_ONEUP.sounds, function(index, source) {
                MG_GAME_ONEUP.sound[index] = new Sound(source);
            });

            $(window).resize(function() {
                onResize ();
            });

            $("#fieldholder").hide();

            MG_GAME_ONEUP.wordField = $("#word");

            $('nav#menu-left').mmenu();
            $('nav#menu-right').mmenu({
                position	: 'right',
                counters	: true
            });
        },
        actions: function (action, click_parent) {
            console.log('call for '+ action + " - click from: " + click_parent);
            var continue_action = '';
            switch(action)
            {
                case 'main_screen':
                    var confirm_text,
                        opponent_id,
                        opponent_name,
                        this_clicked;
                    $("#challenges").remove();
                    // Response sent is json encode of GameChallengesDTO
                    //http://localhost/mggameserver/index.php/api/multiplayer/getOfflineGames/gid/OneUp/
                    MG_API.ajaxCall('/multiplayer/getOfflineGames/gid/' + MG_GAME_API.settings.gid , function(offline_games) {
                        var length = offline_games.length,
                            your_turn = [],
                            waiting_turn = [],
                            counter_my_turns = 0,
                            counter_waiting_turns = 0;
                        for (var i = 0; i < length; i++) {
                            // its my turn
                            if (parseInt(offline_games[i].turnUserId, 10) === MG_GAME_ONEUP.user.id) {
                                your_turn[counter_my_turns] = offline_games[i];
                            } else {
                                // its in waiting
                                waiting_turn[counter_waiting_turns] = offline_games[i];
                            }
                        }

                        MG_API.ajaxCall('/multiplayer/getChallenges/gid/' + MG_GAME_API.settings.gid , function(challenges_response) {
                            challenges_response.your_turn = your_turn;
                            challenges_response.waiting_turn = waiting_turn;

                            $("#template-challenges").tmpl(challenges_response).appendTo($("#main_screen")).after(function () {
                                if ((challenges_response.sent.length + challenges_response.waiting_turn.length) === 0) {
                                    $("#challenges_sent").find(".no_value").show();
                                } else {
                                    var that;
                                    // add delete functionality
                                    $("#challenges_sent .delete").off('click').on('click', function () {
                                        this_clicked = $(this);
                                        that = this_clicked.closest(".row");
                                        opponent_id = that.attr('opponent_id');
                                        var playedGameId = that.attr('playedGameId');
                                        opponent_name = that.find('span.username').text();
                                        confirm_text = "Do you really want to end the game with " + opponent_name;
                                        confirmPretty(confirm_text, function () {
                                            if (playedGameId === '') {
                                                // this is a challenge
                                                //http://localhost/mggameserver/index.php/api/multiplayer/rejectChallenge/gid/OneUp/fromUserId/12/toUserId/14
                                                MG_API.ajaxCall('/multiplayer/rejectChallenge/gid/' + MG_GAME_API.settings.gid + '/fromUserId/' + MG_GAME_ONEUP.user.id + '/toUserId/' + opponent_id , function(challenges_response) {
                                                    $("a[location='main_screen']").click();
                                                });
                                            } else {
                                                // game started
                                                MG_API.ajaxCall('/multiplayer/finishGame/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + playedGameId , function(challenges_response) {
                                                    $("a[location='main_screen']").click();
                                                });
                                            }
                                        });
                                    });
                                }
                                if ((challenges_response.received.length + challenges_response.your_turn.length) === 0) {
                                    $("#challenges_received").find(".no_value").show();
                                } else {
                                    $("#challenges_received .delete").off('click').on('click', function () {
                                        var that,
                                            this_clicked = $(this);

                                        that = this_clicked.closest(".row");
                                        opponent_id = that.attr('opponent_id');
                                        opponent_name = that.find('span.username').text();
                                        var playedGameId = that.attr('playedGameId');
                                        if (playedGameId === '') {
                                            confirm_text = "Do you really want to reject the game with " + opponent_name;
                                        } else {
                                            confirm_text = "Do you really want to end the game with " + opponent_name;
                                        }
                                        confirmPretty(confirm_text, function () {
                                            if (playedGameId === '') {
                                                // game not started yet
                                                MG_API.ajaxCall('/multiplayer/rejectChallenge/gid/' + MG_GAME_API.settings.gid + '/fromUserId/' + opponent_id + '/toUserId/' + MG_GAME_ONEUP.user.id + '/', function(challenges_response) {
                                                    $("a[location='main_screen']").click();
                                                });
                                            } else {
                                                // game started
                                                MG_API.ajaxCall('/multiplayer/finishGame/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + playedGameId , function(challenges_response) {
                                                    $("a[location='main_screen']").click();
                                                });
                                            }
                                        });
                                    });
                                    $("#challenges_received .start_game").off('click').on('click', function () {
                                        this_clicked = $(this);
                                        var opponent_id = this_clicked.closest(".row").attr('opponent_id');
                                        var start_game = false;

                                        if (this_clicked.attr('type') === 'accept_challenge') {
                                            MG_API.ajaxCall('/multiplayer/acceptChallenge/gid/' + MG_GAME_API.settings.gid + '/opponentId/' + opponent_id, function(response) {
                                                // $playedGameId
                                                MG_GAME_ONEUP.pass_game_id = response.playedGameID;
                                                MG_GAME_ONEUP.opponent_id = opponent_id;
                                                MG_GAME_ONEUP.opponent_name = this_clicked.closest(".row").find('span.username').text();
                                                MG_GAME_ONEUP.actions('game_screen', '');
                                            });
                                        } else {
                                            start_game = true;
                                            MG_GAME_ONEUP.pass_game_id = this_clicked.closest(".row").attr('playedGameId');
                                            MG_GAME_ONEUP.opponent_id = opponent_id;
                                            MG_GAME_ONEUP.opponent_name = this_clicked.closest(".row").find('span.username').text();
                                            MG_GAME_ONEUP.actions('game_screen', '');
                                        }
                                    });
                                }
                            });
                        });
                    });
                    break;
                case 'game_screen':
                    $("#header").find('.words').show();
                    //game_screen
                    //http://localhost/mggameserver/index.php/api/multiplayer/getOfflineGameState/gid/OneUp/playedGameId/212
                    MG_API.ajaxCall('/multiplayer/getOfflineGameState/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id , function(turn_response) {
                        /**
                        public $tags //GameTagDTO[]
                         {"turns":[{"turn":1,"score":"5","opponentScore":"10","tags":[{"tag":"pool","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null},{"tag":"dfwefwe","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null}],"opponentTags":[{"tag":"rtytr","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null},{"tag":"ergerge","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null},{"tag":"pool","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null}],"media":[{"id":"2","mimeType":"image\/jpeg","imageFullSize":"http:\/\/localhost\/mgc\/www\/\/uploads\/images\/image026.jpg","imageScaled":null,"thumbnail":"http:\/\/localhost\/mgc\/www\/\/uploads\/thumbs\/image026.jpg","videoWebm":null,"videoMp4":null,"audioMp3":null,"audioOgg":null,"licence":{"id":"","name":"","description":""}}],"wordsToAvoid":[]}],"finished":false}
                        */
                        var json = {};
                        json.current_level = turn_response.turns.length;
                        json.turn = turn_response.turns[(json.current_level -1)];
                        json.opponentName = MG_GAME_ONEUP.opponent_name;
                        json.num_words = turn_response.turns[(json.current_level - 1)].tags.length;

                        json.current_turn_tag = [];
                        var tags = turn_response.turns[(json.current_level -1)].tags;
                        for (i = 0; i < tags.length; i++) {
                            json.current_turn_tag[i] = {};
                            var tags = turn_response.turns[(json.current_level -1)].tags;
                            json.current_turn_tag[i].div = calculatedRow(tags[i].tag, tags[i].score, json.current_level);
                        }

                        var tag_count = json.num_words;
/*
                        turn_response.tags.word = [];
                        turn_response.tags.word[0] = {};
                        turn_response.tags.word[0].tag = 'PRETTY';
                        turn_response.tags.word[0].point = '-1';
                        turn_response.tags.word[0].comment = 'SIMON GOT YOUR POINT';
                        turn_response.tags.word[1] = {};
                        turn_response.tags.word[1].tag = 'IMPRESSIONISM';
                        turn_response.tags.word[1].point = '+3';
                        turn_response.tags.word[1].comment = 'GREAT WORD';
*/
                        $("#template-game_screen").tmpl(json).appendTo($("#game_screen")).after(function () {
                            $("#game_screen .blank_bar").off('click').on('click', function () {
                                var that = $(this),
                                    current_tag;
                                that.empty();
                                that.append('<input type="text" placeholder="ADD A WORD" />');
                                that.find('input').focus();
                                that.find('input').keypress(function (e) {
                                    if (e.which == 13) {
                                        var tag = that.find('input').val(),
                                            new_html;
                                        if (validTag(that.find('input').val(), turn_response.tags)) {
                                            //'[{"tag":"Test","original":null,"score":null,"weight":null,"mediaId":"6","type":null,"tag_id":null}]';
                                            current_tag = '[{"tag": "' + tag + '", "original":null,"score":null,"weight":null,"mediaId":"' + turn_response.turns[0].media[0].id + '","type":null,"tag_id":null}]';
                                            MG_API.ajaxCall('/multiplayer/submit/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id, function(response) {
                                                var new_row = {};
                                                    new_row.current_turn_tag = [],
                                                    tags = turn_response.turns[(json.current_level -1)].tags;

                                                that.replaceWith(calculatedRow(response[0].tag, response[0].score, json.current_level));
                                                that.off('click');

                                                var score_obj = $("#game_screen .you span");
                                                score_obj.html(parseInt(score_obj.text(), 10) + parseInt(response[0].score, 10));
                                                tag_count++;
                                                if (tag_count === 3) {
                                                    $("#game_screen .round").html('WAITING ...');
                                                }
                                            }, {
                                                    type: 'post',
                                                    data: {
                                                        tags: current_tag
                                                    }
                                                }
                                            );
                                        }


                                        return false;
                                    }
                                });
                            });

                            $("#header").find('.words').off('click').on('click', function (e) {
                                e.preventDefault();
                                $("#word_screen").empty();
                                $("#header").find('.back').show();
                                $("#header").find('.words').hide();
                                MG_GAME_ONEUP.actions('word_screen', '');
                                return false;
                            });
                        });

                        function validTag (tag, tags) {
                            //TODO check if tag is already entered this turn
                            return true;
                        }
                    });
                    break;
                case 'word_screen':
                    $("#game_screen").empty();
                    MG_API.ajaxCall('/multiplayer/getOfflineGameState/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id , function(turn_response) {
                            var json = {};
                            json.round_1 = '';
                            json.round_2 = '';
                            json.round_3 = '';

                            var current_level = turn_response.turns.length;
                            for (var i = 1; i <= current_level; i++) {
                                for (var j = 0; j < 3; j++) {
                                    if (j < turn_response.turns[(i-1)].tags.length) {
                                        var j_tag = turn_response.turns[0].tags[j];
                                        json['round_' + i]+= calculatedRow(j_tag.tag, j_tag.score, i);
                                    } else {
                                        json['round_' + i]+= '<div class="small_row blank_bar">ADD A WORD</div>';
                                    }
                                }
                            }
                            json.current_level = current_level;
                            json.score = turn_response.turns[(current_level-1)].score;
                            json.opponentName = MG_GAME_ONEUP.opponent_name;
                            json.opponentScore = turn_response.turns[(current_level-1)].opponentScore;

                            $("#template-word_screen").tmpl(json).appendTo($("#word_screen")).after(function () {

                            });
                    });

                    $("#header").find('.back').off('click').on('click', function (e) {
                        e.preventDefault();
                        $("#header").find('.back').hide();
                        $("#header").find('.words').show();
                        MG_GAME_ONEUP.back_location = 'game_screen';
                        MG_GAME_ONEUP.actions('game_screen', '');
                        return false;
                    });
                    break;
                case 'game_customize':
                    $("#game_customize").find("#listing").remove();
                    $('#new_interest').attr('value', '');

                    $('input#new_interest').keypress(function (e) {
                        if (e.which == 13) {
                            $("#game_customize").find('.note').remove();
                            //http://localhost/mggameserver/index.php/api/multiplayer/addInterest/gid/OneUp/interest/alabala/
                            MG_API.ajaxCall('/multiplayer/addInterest/gid/' + MG_GAME_API.settings.gid + '/interest/' + encodeURIComponent($('#new_interest').val()), function(institution_response) {
                                $('#new_interest').attr('value', '');
                                $("#game_customize").find('.new_interest').append('<div id="note">The interest was added.</div>');
                            });
                            return false;
                        }
                    });
                    //http://localhost/mggameserver/index.php/api/multiplayer/getInstitutions/gid/OneUp/
                    MG_API.ajaxCall('/multiplayer/getInstitutions/gid/' + MG_GAME_API.settings.gid , function(institution_response) {
                        var json = {};
                        json.all_institution = institution_response;
                        $("#template-favorite_institutions").tmpl(json).appendTo($("#game_customize")).after(function () {
                            // add click on an institution
                            // click on an institution
                            $("#list_institutions .institution").off('click').on('click', function (e) {
                                e.preventDefault();
                                var row = $(this);
                                MG_GAME_ONEUP.institution_id = row.attr('institution_id');
                                MG_GAME_ONEUP.back_location = 'game_customize';
                                // institution_info
                                MG_GAME_ONEUP.actions('institution_info', '');

                            });
                        });
                    });

                    break;
                case 'make_challenge':
                    var opponent_name = '';
                    if ($("#find_opponent")) {
                        opponent_name = $("#find_opponent").find('.opponent_name').val();
                    }

                    MG_API.ajaxCall('/multiplayer/challenge/gid/' + MG_GAME_API.settings.gid + '/username/' + opponent_name , function(challenges_response) {
                        if (challenges_response == 'null') {
                            // TODO toastmessage not working need to check.
                            $().toastmessage("showToast", {
                                text: 'Player is not found!',
                                position: "tops-center",
                                type: "notice",
                                background: "white"
                            });
                            MG_GAME_ONEUP.actions(location, '');
                        } else {
                            // player is challenged
                            $("a[location='main_screen']").click();
                        }
                        $("#find_opponent").find('.opponent_name').attr('value', '');
                    });
                    break;
                case 'how_to':
                    var swipe_img = $( "#image_gallery"),
                        my_iter = 1,
                        next_iter,
                        numb_img = $( "#image_gallery > div").length;

                    Hammer(swipe_img).on('click', function() { // swiperight
                        next_iter = my_iter + 1;
                        if(next_iter === numb_img) {
                            next_iter = 1;
                        }
                        swipe_images_next (my_iter, next_iter);
                        my_iter = next_iter;
                    });

                    Hammer(swipe_img).on("swiperight", function() { // swiperight
                        next_iter = my_iter + 1;
                        if(next_iter === numb_img) {
                            next_iter = 1;
                        }
                        swipe_images_next (my_iter, next_iter);
                        my_iter = next_iter;
                    });

                    Hammer(swipe_img).on("swipeleft", function() { // swipeleft
                        next_iter = my_iter - 1;
                        if(next_iter === 0) {
                            next_iter = numb_img;
                        }
                        swipe_images_prev (my_iter, next_iter);
                        my_iter = next_iter;
                    });

                    function swipe_images_next (my_iter, next_iter) {
                        swipe_img.find("div[number='" + my_iter + "']").hide('slide', {direction: 'left', complete: function () {
                            swipe_img.find("div[number='" + next_iter + "']").show('slide', {direction: 'right'}, 1000);
                        }}, 1000);
                    }

                    function swipe_images_prev (my_iter, next_iter) {
                        swipe_img.find("div[number='" + my_iter + "']").hide('slide', {direction: 'right', complete: function () {
                            swipe_img.find("div[number='" + next_iter + "']").show('slide', {direction: 'left'}, 1000);
                        }}, 1000);
                    }
                    break;
                case 'learn_more':
                    break;
                case 'account':
                    $("#account_playlist").empty();
                    $("#account_interest").empty();
                    $("#account_bookmark").empty();

                    //getBookmarks
                    MG_API.ajaxCall('/multiplayer/getBookmarks/gid/' + MG_GAME_API.settings.gid , function(account_bookmarks) {
/*
                        var account_bookmarks = [];
                        account_bookmarks[0] = {'id': 0, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[1] = {'id': 1, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[2] = {'id': 2, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[3] = {'id': 3, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[4] = {'id': 4, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[5] = {'id': 5, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[6] = {'id': 6, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[7] = {'id': 7, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[8] = {'id': 8, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[9] = {'id': 9, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[10] = {'id': 10, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[11] = {'id': 11, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[12] = {'id': 12, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[13] = {'id': 13, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[14] = {'id': 14, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks[15] = {'id': 15, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
*/
                        var json = {};
                        json.bookmarked = account_bookmarks;
                        $("#template-account_bookmark").tmpl(json).appendTo($("#account_bookmark")).after(function () {
                            // add zoom to scaled and move swipe_left::swipe_right
                        });
                    });
                    // Interests
                    MG_API.ajaxCall('/multiplayer/getInterests/gid/' + MG_GAME_API.settings.gid , function(account_interest) {
                        var json = {};
                        json.interests = account_interest;
                        $("#template-account_interest").tmpl(json).appendTo($("#account_interest")).after(function () {
                            $("#account_interest .delete").off('click').on('click', function () {
                                var row = $(this).closest('.row');
                                var row_id = row.attr('interest_id');
                                confirmPretty("Do you really want to remove the interest.", function () {
                                    MG_API.ajaxCall('/multiplayer/removeInterest/gid/' + MG_GAME_API.settings.gid + '/id/' + row_id + '/', function(response) {
                                        row.remove();
                                    });
                                })
                            });
                        });
                    });

                    // List of all institutions that are not banned yet
                    MG_API.ajaxCall('/multiplayer/getInstitutions/gid/' + MG_GAME_API.settings.gid , function(account_playlist) {
                        var json = {};
                        json.play_lists = account_playlist;
                        $("#template-account_playlist").tmpl(json).appendTo($("#account_playlist")).after(function () {
                            // click on an institution
                            $("#account_playlist .institution").off('click').on('click', function () {
                                var row = $(this).closest('.row');
                                MG_GAME_ONEUP.institution_id = row.attr('institution_id');
                                MG_GAME_ONEUP.back_location = 'account';
                                // institution_info
                                MG_GAME_ONEUP.actions('institution_info', '');

                            });

                            // delete
                            $("#account_playlist .delete").off('click').on('click', function () {
                                var row = $(this).closest('.row');
                                var row_id = row.attr('institution_id');
                                confirmPretty("Do you really want to disable medias from the institution.", function () {
                                    MG_API.ajaxCall('/multiplayer/banInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + row_id + '/', function(response) {
                                        row.remove();
                                    });
                                })
                            });
                        });
                    });

                    break;
                case 'find_opponent':
                    $('#find_opponent input.opponent_name').keypress(function (e) {
                            if (e.which == 13) {
                                $('#find_opponent .play').click();
                            }
                    });
                    break;
                case 'institution_info':
                    $("#institution_info").empty();
                    $("#header").find('.setting').hide();
                    $("#header").find('.back').show();
                    MG_API.ajaxCall('/multiplayer/GetInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + MG_GAME_ONEUP.institution_id + '/', function(response) {
                        var inst_remove = '<div class="right top_btn favorite" type="remove">REMOVE FROM PLAYLIST</div>',
                            inst_add = '<div class="right top_btn favorite" type="add">FAVORITE</div>';

                        //show_institution
                        $("#template-show_institution").tmpl(response).appendTo($("#institution_info")).after(function () {

                        });
                        if (response[0].isBanned === false) {
                            // Institution is in favorite list
                            $("#header").append(inst_remove);
                        } else {
                            $("#header").append(inst_add);
                        }

                        addClickFav();

                        function addClickFav () {
                            $("#header").find('.favorite').off('click').on('click', function () {
                                $("#header").find('.favorite').remove();
                                if ($(this).attr('type') === 'remove') {
                                    MG_API.ajaxCall('/multiplayer/banInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + MG_GAME_ONEUP.institution_id + '/', function(response) {
                                        setTimeout(function(){}, 3000);
                                        $("#header").append(inst_add);
                                        addClickFav();
                                    });
                                } else {
                                    MG_API.ajaxCall('/multiplayer/unbanInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + MG_GAME_ONEUP.institution_id + '/', function(response) {
                                        setTimeout(function(){}, 3000);
                                        $("#header").append(inst_remove);
                                        addClickFav();
                                    });
                                }
                            });
                        }

                        $("#header").find('.back').off('click').on('click', function (e) {
                            e.preventDefault();
                            $("#header").find('.back').hide();
                            $("#header").find('.favorite').remove();
                            $("#header").find('.setting').show();
                            click_parent = MG_GAME_ONEUP.back_location;
                            $("a[location='" + MG_GAME_ONEUP.back_location + "']").click();
                            return false;
                        });
                    });
                    break;
                default:
                    console.log('action is unknown');
                    break;
            }

            if (click_parent === '') {
                $("#content div:visible:eq(0)").hide();
                $("#" + action).slideUp().show();
            }
        },
        /*
         REGISTER USER AS ONLINE TO GAME SERVER
         */
        onapiinit: function () {
            // Called just after sharedSecret is triggered
            ///api/multiplayer/register/gid/OneUp/
            MG_API.ajaxCall('/multiplayer/register/gid/' + MG_GAME_API.settings.gid , function(response) {
                MG_GAME_ONEUP.nodeInit();
                MG_GAME_API.curtain.hide();
                MG_GAME_ONEUP.user = response.user;

                $("#content a[href='#']").on('click', function(e) {
                    var location = $(this).attr('location');
                    if (location != undefined) {
                        e.preventDefault();
                        var location = $(this).attr('location');
                        $("#content div:visible:eq(0)").hide();
                        MG_GAME_ONEUP.actions(location, '');
                    }
                });

                $("#main_screen").find(".username").html(response.user.username);

                $("a[location='main_screen']").on('click', function (){
                    MG_GAME_ONEUP.actions('main_screen', 'menu');
                });

                $("a[location='game_customize']").on('click', function (){
                    MG_GAME_ONEUP.actions('game_customize', 'menu');
                });

                $("a[location='how_to']").on('click', function (){
                    MG_GAME_ONEUP.actions('how_to', 'menu');
                });

                $("a[location='learn_more']").on('click', function (){
                    MG_GAME_ONEUP.actions('learn_more', 'menu');
                });

                $("a[location='account']").on('click', function (){
                    MG_GAME_ONEUP.actions('account', 'menu');
                });

                $("a[location='main_screen']").click();

            });
        },
        playSound: function (index) {
            MG_GAME_ONEUP.sound[index].play(MG_GAME_ONEUP.sounds[index]);
        },
        nodeInit: function () {
            var socket = io.connect('http://localhost:8000');


            socket.on('reconnect', function () {
                console.log('Reconnected to the server');
                socket.emit('register', MG_API.settings.shared_secret, MG_GAME_API.settings.gid);
            });


            socket.on('registerFailure', function(data) {

            });

            socket.on('challenge', function(data) {
                //Receive challenge from game player
                // data is JSON encoded object GameUserDTO
            });

            socket.on('rejectChallenge', function(data) {
                // Receive reject challenge from game player
                // data is JSON encoded object GameUserDTO
            });

            socket.on('newTurn', function(data) {
                // Receive information when new turn is created
                // data is JSON encoded object GameTurnDTO
            });

            socket.on('gameEnd', function(data) {
                // Receive when the game end i.e. no more turns
                // data is JSON encoded integer of played game id
            });

            socket.on('penalty', function(data) {
                // Receive penalty
                // data is JSON encoded negative integer of penalty scores
            });

            socket.on('bonus', function(data) {
                // Receive bonus points
                // data is JSON encoded integer of bonus scores
            });

            socket.on('opponentWaiting', function(data) {
                // Receive notification that opponent finished his turn and waiting for you
                // data is JSON encoded integer of played game id
            });

            socket.emit('register', MG_API.settings.shared_secret, MG_GAME_API.settings.gid);
        },
        /*
         * display games turn
         */
        renderTurn: function (response) {

        },

        /*
         * display the final turn
         */
        renderFinal:function () {
        },

        /*
         * evaluate each response from /api/games/play calls (POST or GET)
         */
        onresponse:function (response) {
            console.log('response');
        },


        /*
         * on callback for the submit button
         */
        onsubmit:function () {
            console.log('onsubmit');
            return false;
        },
        /*
         * this method appears to be not used
         */
        submit:function () {
            console.log('submit');
            return false;
        },

        /*
         * process /api/games/play get request responses
         */
        ongameinit:function (response) {

        },

        liftOff:function () {
            MG_GAME_ONEUP.renderFinal();
        },

        nextlevel:function (skip) {
        }
    });
}(jQuery);

function confirmPretty(text, onOk) {
    $("<div title='Confirmation'>" + text + "</div>").dialog({
        modal: true,
        dialogClass: 'no-title',
        buttons: [{
            text: "Cancel",
            id: "confirm_no",
            click: function () {
                $(this).dialog('destroy').remove();
            }
        }, {
            text: "Ok",
            id: "confirm_yes",
            click: function () {
                onOk();
                $(this).dialog('destroy').remove();
            }
        }]
    });
}

(function ($) {
    $.extend(jQuery.tmpl.tag, {
        "for": {
            _default: {$2: "var i=1;i<=1;i++"},
            open: 'for ($2){',
            close: '};'
        }
    });

    $.extend(jQuery.tmpl.tag, {
        "var": {
            open: "var $1;"
        }
    });
})(jQuery);

function calculatedRow (tag, score, current_level) {
    var new_html,
        html_class;
    if (score === null) {
        score = 1;
    }
    if (parseInt(score, 10) === 1 && current_level === 1) {
        html_class = 'standard_bar';
        new_html = '<span>+1</span>' + tag;
    } else if (parseInt(score, 10) === 1 && current_level !== 1) {
        html_class = 'up_bar';
        new_html = '<span>+1</span>' + tag + '<span class="bar_right">YOU GOT<br/>' + MG_GAME_ONEUP.opponent_name + '<br/>POINT!</span>';
    } else if (score === -1) {
        html_class = 'upped_bar';
        new_html = '<span>-1</span>' + tag + '<span class="bar_right">' + MG_GAME_ONEUP.opponent_name + '<br/>GOT YOUR<br/>POINT!</span>';
    } else if (parseInt(score, 10) === 3) {
        html_class = 'bonus_bar';
        new_html = '<span>+3</span>' + tag + '<span class="bar_right" style="padding-top: 5px;">GREAT<br/>WORD!</span>';
    }

    return '<div class="small_row ' + html_class + '">' + new_html + '</div>';
}

function onResize () {
    var max_height,
        gamearea = $("#gamearea");

    if (is_touch_device) {
        max_height = $(window).height() - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height': max_height, 'max-width': $(window).width() - 35});
    } else {
        max_height = $(window).height() - $("#header").height() -1 - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height': max_height, 'max-width': $(window).width() - 35});
    }
}