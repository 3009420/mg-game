MG_GAME_ONEUP = function ($) {
    return $.extend(MG_GAME_API, {
        wordField:null,
        submitButton:null,
        media:null,
        licence_info:[],
        more_info:null,
        levels:[],
        level:1,
        words:[],
        sound: {},
        sounds: {},
        user: {},
        opponent_id: {},
        opponent_name: {},
        /*
         * initialize the game. called from inline script generated by the view
         */
        init: function (options) {
            var settings = $.extend(options, {
                ongameinit: MG_GAME_ONEUP.ongameinit
            });
            MG_GAME_API.game_init(settings);
            var game_assets_uri = $("#game_assets_uri").val();

            MG_GAME_ONEUP.sounds = {
                fail_sound: game_assets_uri + 'audio/sound_fail.mp3',
                next_level: game_assets_uri + 'audio/nextlevel.mp3',
                try_again : game_assets_uri + 'audio/tryagain.mp3'
            };

            $.each(MG_GAME_ONEUP.sounds, function(index, source) {
                MG_GAME_ONEUP.sound[index] = new Sound(source);
            });

            $(window).resize(function() {
                onResize ();
            });

            $("#fieldholder").hide();

            MG_GAME_ONEUP.wordField = $("#word");

            $('nav#menu-left').mmenu();
            $('nav#menu-right').mmenu({
                position	: 'right',
                counters	: true
            });
        },
        actions: function (action, click_parent) {
            console.log('call for '+ action + " - click from: " + click_parent);
            var continue_action = '';
            switch(action)
            {
                case 'main_screen':
                    var confirm_text,
                        opponent_id,
                        opponent_name,
                        this_clicked;
                    $("#challenges").remove();
                    // Response sent is json encode of GameChallengesDTO
                    //http://localhost/mggameserver/index.php/api/multiplayer/getOfflineGames/gid/OneUp/
                    MG_API.ajaxCall('/multiplayer/getOfflineGames/gid/' + MG_GAME_API.settings.gid , function(challenges_response) {

                    })
                    MG_API.ajaxCall('/multiplayer/getChallenges/gid/' + MG_GAME_API.settings.gid , function(challenges_response) {
                        challenges_response.your_turn = [];
                        challenges_response.your_turn[0] = {'id': 7, 'username': 'your_turn_test'};

                        challenges_response.waiting_turn = [];
                        challenges_response.waiting_turn[0] = {'id': 6, 'username': 'waiting_test'};

                        $("#template-challenges").tmpl(challenges_response).appendTo($("#main_screen")).after(function () {
                            if ((challenges_response.sent.length + challenges_response.waiting_turn.length) === 0) {
                                $("#challenges_sent").find(".no_value").show();
                            } else {
                                var that;
                                // add delete functionality
                                $("#challenges_sent .delete").off('click').on('click', function () {
                                    this_clicked = $(this);
                                    that = this_clicked.closest(".row");
                                    opponent_id = that.attr('opponent_id');
                                    opponent_name = that.find('span').text();
                                    confirm_text = "Do you really want to end the game with " + opponent_name;
                                    confirmPretty(confirm_text, function () {
                                        //http://localhost/mggameserver/index.php/api/multiplayer/rejectChallenge/gid/OneUp/fromUserId/12/toUserId/14
                                        MG_API.ajaxCall('/multiplayer/rejectChallenge/gid/' + MG_GAME_API.settings.gid + '/fromUserId/' + MG_GAME_ONEUP.user.id + '/toUserId/' + opponent_id , function(challenges_response) {
                                            $("a[location='main_screen']").click();
                                        });
                                    });
                                });
                            }
                            if ((challenges_response.received.length + challenges_response.your_turn.length) === 0) {
                                $("#challenges_received").find(".no_value").show();
                            } else {
                                $("#challenges_received .delete").off('click').on('click', function () {
                                    var that,
                                        this_clicked = $(this);

                                    that = this_clicked.closest(".row");
                                    opponent_id = that.attr('opponent_id');
                                    opponent_name = that.find('span').text();
                                    confirm_text = "Do you really want to reject the game with " + opponent_name;
                                    confirmPretty(confirm_text, function () {
                                        MG_API.ajaxCall('/multiplayer/rejectChallenge/gid/' + MG_GAME_API.settings.gid + '/fromUserId/' + opponent_id + '/toUserId/' + MG_GAME_ONEUP.user.id + '/', function(challenges_response) {
                                            $("a[location='main_screen']").click();
                                        });
                                    });
                                });
                                $("#challenges_received .start_game").off('click').on('click', function () {
                                    this_clicked = $(this);
                                    var opponent_id = this_clicked.closest(".row").attr('opponent_id');
                                    var start_game = false;

                                    if (this_clicked.attr('type') === 'accept_challenge') {
                                        //http://localhost/mggameserver/index.php/api/multiplayer/acceptChallenge/gid/OneUp/opponentId/123
                                        MG_API.ajaxCall('/multiplayer/acceptChallenge/gid/' + MG_GAME_API.settings.gid + '/opponentId/' + opponent_id + '/', function(challenges_response) {
                                            start_game = true;
                                        });
                                    } else {
                                        start_game = true;
                                    }
                                    if (start_game) {
                                        MG_GAME_ONEUP.opponent_id = opponent_id;
                                        MG_GAME_ONEUP.opponent_name = this_clicked.closest(".row").find('span.username').text();
                                        MG_GAME_ONEUP.actions('game_screen', '');
                                    }
                                });
                            }
                        });
                    });
                    // user is REGISTER USER AS ONLINE TO GAME SERVER
                    /*
                     Return is JSON STRING
                     GameDTO
                     GameUserDTO
                     */
                    break;
                case 'game_screen':
                    //game_screen
                    //http://localhost/mggameserver/index.php/api/multiplayer/getOfflineGameState/gid/OneUp/playedGameId/212
                    //MG_API.ajaxCall('/multiplayer/getOfflineGameState/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + game_id , function(turn_response) {
                        //console.log('dvdf:' + MG_GAME_ONEUP.opponent_id);
                        /**
                        public $turn;
                        public $score;
                        public $opponentScore;
                        public $tags //GameTagDTO[]
                        public $media; //GameMediaDTO
                        public $wordsToAvoid;
                        */
                        var turn_response = {};
                        turn_response.turn = 1;
                        turn_response.score = 10;
                        turn_response.opponentScore = 20;
                        turn_response.opponent_name = MG_GAME_ONEUP.opponent_name;
                        turn_response.tags = {};
                        turn_response.tags.num_words = 2;
                        turn_response.tags.word = [];
                        turn_response.tags.word[0] = {};
                        turn_response.tags.word[0].tag = 'PRETTY';
                        turn_response.tags.word[0].point = '-1';
                        turn_response.tags.word[0].comment = 'SIMON GOT YOUR POINT';

                        turn_response.tags.word[1] = {};
                        turn_response.tags.word[1].tag = 'IMPRESSIONISM';
                        turn_response.tags.word[1].point = '+3';
                        turn_response.tags.word[1].comment = 'GREAT WORD';

                        turn_response.media = {};
                        /*
                        public $id;
                        public $mimeType;
                        public $imageFullSize;
                        public $imageScaled;
                        public $thumbnail;
                        */
                        turn_response.media.id = 3;
                        turn_response.media.imageScaled = 'http://localhost/mgg_test/www/images/video_ico.png';
                        turn_response.wordsToAvoid = "";
                        $("#template-game_screen").tmpl(turn_response).appendTo($("#game_screen")).after(function () {

                        });
                    //});
                    break;
                case 'game_customize':
                    $("#game_customize").find("#listing").remove();
                    //http://localhost/mggameserver/index.php/api/multiplayer/getInstitutions/gid/OneUp/
                    //MG_API.ajaxCall('/multiplayer/getInstitutions/gid/' + MG_GAME_API.settings.gid , function(institution_response) {
                    /**
                     public $id;
                     public $name;
                     public $description;
                     public $logo;
                     public $isBanned;
                     */
                        var institution_response = {};
                        institution_response.all_institution = [];
                        institution_response.all_institution[0] = {'id': 3, 'name': 'portokala1', 'logo': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        institution_response.all_institution[1] = {'id': 4, 'name': 'portokala2', 'logo': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        institution_response.all_institution[2] = {'id': 5, 'name': 'portokala3', 'logo': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        $("#template-favorite_institutions").tmpl(institution_response).appendTo($("#game_customize")).after(function () {

                        });
                    //});

                    break;
                case 'make_challenge':
                    var opponent_name = '';
                    if ($("#find_opponent")) {
                        opponent_name = $("#find_opponent").find('.opponent_name').val();
                    }

                    MG_API.ajaxCall('/multiplayer/challenge/gid/' + MG_GAME_API.settings.gid + '/username/' + opponent_name , function(challenges_response) {
                        if (challenges_response == 'null') {
                            // TODO case player not valid - might switch action
                            // TODO warning in case player is not valid
                            $().toastmessage("showToast", {
                                text: 'Player is not found!',
                                position: "tops-center",
                                type: "notice",
                                background: "white"
                            });
                            MG_GAME_ONEUP.actions(location, '');
                        } else {
                            // player is challenged
                            $("a[location='main_screen']").click();
                        }
                        $("#find_opponent").find('.opponent_name').attr('value', '');
                    });
                    break;
                case 'how_to':
                    var swipe_img = $( "#image_gallery"),
                        my_iter = 1,
                        next_iter,
                        numb_img = $( "#image_gallery > div").length;

                    Hammer(swipe_img).on('click', function() { // swiperight
                        next_iter = my_iter + 1;
                        if(next_iter === numb_img) {
                            next_iter = 1;
                        }
                        swipe_images_next (my_iter, next_iter);
                        my_iter = next_iter;
                    });

                    Hammer(swipe_img).on("swiperight", function() { // swiperight
                        next_iter = my_iter + 1;
                        if(next_iter === numb_img) {
                            next_iter = 1;
                        }
                        swipe_images_next (my_iter, next_iter);
                        my_iter = next_iter;
                    });

                    Hammer(swipe_img).on("swipeleft", function() { // swipeleft
                        next_iter = my_iter - 1;
                        if(next_iter === 0) {
                            next_iter = numb_img;
                        }
                        swipe_images_prev (my_iter, next_iter);
                        my_iter = next_iter;
                    });

                    function swipe_images_next (my_iter, next_iter) {
                        swipe_img.find("div[number='" + my_iter + "']").hide('slide', {direction: 'left', complete: function () {
                            swipe_img.find("div[number='" + next_iter + "']").show('slide', {direction: 'right'}, 1000);
                        }}, 1000);
                    }

                    function swipe_images_prev (my_iter, next_iter) {
                        swipe_img.find("div[number='" + my_iter + "']").hide('slide', {direction: 'right', complete: function () {
                            swipe_img.find("div[number='" + next_iter + "']").show('slide', {direction: 'left'}, 1000);
                        }}, 1000);
                    }
                    break;
                case 'learn_more':
                    break;
                case 'account':
                    $("#account_info").empty();
                    //getBookmarks
                    MG_API.ajaxCall('/multiplayer/getBookmarks/gid/' + MG_GAME_API.settings.gid , function(account_bookmarks) {
/*
                        var account_bookmarks = {};
                        account_bookmarks.bookmarked = [];
                        account_bookmarks.bookmarked[0] = {'id': 0, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[1] = {'id': 1, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[2] = {'id': 2, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[3] = {'id': 3, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[4] = {'id': 4, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[5] = {'id': 5, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[6] = {'id': 6, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[7] = {'id': 7, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[8] = {'id': 8, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[9] = {'id': 9, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[10] = {'id': 10, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[11] = {'id': 11, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[12] = {'id': 12, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[13] = {'id': 13, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[14] = {'id': 14, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
                        account_bookmarks.bookmarked[15] = {'id': 15, 'thumbnail': 'http://localhost/mgg_test/www/images/video_ico.png', 'scaled': 'http://localhost/mgg_test/www/images/video_ico.png'};
*/
                        /*
                         public $id;
                         public $mimeType;
                         public $imageFullSize;
                         public $imageScaled;
                         public $thumbnail;
                         */
                        var json = {};
                        json.bookmarked = account_bookmarks;
                        $("#template-account_bookmark").tmpl(json).appendTo($("#account_info")).after(function () {
                            // add zoom to scaled and move swipe_left::swipe_right
                        });
                    });
                    // Interests
                    MG_API.ajaxCall('/multiplayer/getInterests/gid/' + MG_GAME_API.settings.gid , function(account_interest) {
                        /**
                         public $id;
                         public $interest;
                         public $created;
                         */
/*                        var account_interest = {};
                        account_interest.interests = [];
                        account_interest.interests[0] = {'id': 3, 'interest': 'My 1st choive'};
                        account_interest.interests[1] = {'id': 4, 'interest': 'My 2nd choive'};*/
                        var json = {};
                        json.interests = account_interest;
                        $("#template-account_interest").tmpl(json).appendTo($("#account_info")).after(function () {
                            // add delete functionality
                        });
                    });

                    // List of all institutions that are not banned yet
                    MG_API.ajaxCall('/multiplayer/getInstitutions/gid/' + MG_GAME_API.settings.gid , function(account_playlist) {
                        /**
                        public $id;
                        public $name;
                        public $description;
                        public $logo;
                        public $isBanned;
                         */
                        var json = {};
                        json.play_lists = account_playlist;
                        $("#template-account_playlist").tmpl(json).appendTo($("#account_info")).after(function () {
                            // add delete functionality
                        });
                    });
                    break;
                default:
                    console.log('action is unknown');
                    break;
            }

            if (click_parent === '') {
                $("#content div:visible:eq(0)").hide();
                $("#" + action).slideUp().show();
            }
        },
        /*
         REGISTER USER AS ONLINE TO GAME SERVER
         */
        onapiinit: function () {
            // Called just after sharedSecret is triggered
            ///api/multiplayer/register/gid/OneUp/
            MG_API.ajaxCall('/multiplayer/register/gid/' + MG_GAME_API.settings.gid , function(response) {
                MG_GAME_ONEUP.nodeInit();
                MG_GAME_API.curtain.hide();
                MG_GAME_ONEUP.user = response.user;

                $("#content a[href='#']").on('click', function(e) {
                    var location = $(this).attr('location');
                    if (location != undefined) {
                        console.log('click somewhere');
                        e.preventDefault();
                        var location = $(this).attr('location');
                        $("#content div:visible:eq(0)").hide();
                        MG_GAME_ONEUP.actions(location, '');
                    }
                });

                $("#main_screen").find(".username").html(response.user.username);

                $("a[location='main_screen']").on('click', function (){
                    console.log('main_screen');
                    MG_GAME_ONEUP.actions('main_screen', 'menu');
                });

                $("a[location='game_customize']").on('click', function (){
                    console.log('game_customize');
                    MG_GAME_ONEUP.actions('game_customize', 'menu');
                });

                $("a[location='how_to']").on('click', function (){
                    console.log('how_to');
                    MG_GAME_ONEUP.actions('how_to', 'menu');
                });
                $("a[location='learn_more']").on('click', function (){
                    console.log('learn_more');
                    MG_GAME_ONEUP.actions('learn_more', 'menu');
                });

                $("a[location='account']").on('click', function (){
                    console.log('account');
                    MG_GAME_ONEUP.actions('account', 'menu');
                });

                $("a[location='main_screen']").click();


            });
        },
        playSound: function (index) {
            MG_GAME_ONEUP.sound[index].play(MG_GAME_ONEUP.sounds[index]);
        },
        nodeInit: function () {
            var socket = io.connect('http://localhost:8000');


            socket.on('reconnect', function () {
                console.log('Reconnected to the server');
                socket.emit('register', MG_API.settings.shared_secret, MG_GAME_API.settings.gid);
            });


            socket.on('registerFailure', function(data) {

            });

            socket.on('challenge', function(data) {
                //Receive challenge from game player
                // data is JSON encoded object GameUserDTO
            });

            socket.on('rejectChallenge', function(data) {
                // Receive reject challenge from game player
                // data is JSON encoded object GameUserDTO
            });

            socket.on('newTurn', function(data) {
                // Receive information when new turn is created
                // data is JSON encoded object GameTurnDTO
            });

            socket.on('gameEnd', function(data) {
                // Receive when the game end i.e. no more turns
                // data is JSON encoded integer of played game id
            });

            socket.on('penalty', function(data) {
                // Receive penalty
                // data is JSON encoded negative integer of penalty scores
            });

            socket.on('bonus', function(data) {
                // Receive bonus points
                // data is JSON encoded integer of bonus scores
            });

            socket.on('opponentWaiting', function(data) {
                // Receive notification that opponent finished his turn and waiting for you
                // data is JSON encoded integer of played game id
            });

            socket.emit('register', MG_API.settings.shared_secret, MG_GAME_API.settings.gid);
        },
        /*
         * display games turn
         */
        renderTurn: function (response) {

        },

        /*
         * display the final turn
         */
        renderFinal:function () {
        },

        /*
         * evaluate each response from /api/games/play calls (POST or GET)
         */
        onresponse:function (response) {
            console.log('response');
        },


        /*
         * on callback for the submit button
         */
        onsubmit:function () {
            console.log('onsubmit');
            return false;
        },
        /*
         * this method appears to be not used
         */
        submit:function () {
            console.log('submit');
            return false;
        },

        /*
         * process /api/games/play get request responses
         */
        ongameinit:function (response) {
            console.log('ongameinit');
            /*
            // send ajax call as POST request to validate a turn
            MG_API.ajaxCall('/api/multiplayer/register/gid/' + MG_GAME_API.settings.gid, function (response) {
                MG_GAME_ONEUP.user = response;
            }, {
                type:'post',
                data:{ }
            });*/
//            MG_GAME_ONEUP.onresponse(response);
        },

        liftOff:function () {
            MG_GAME_ONEUP.renderFinal();
        },

        nextlevel:function (skip) {
        }
    });
}(jQuery);

function confirmPretty(text, onOk) {
    $("<div title='Confirmation'>" + text + "</div>").dialog({
        modal: true,
        dialogClass: 'no-title',
        buttons: [{
            text: "Cancel",
            id: "confirm_no",
            click: function () {
                $(this).dialog('destroy').remove();
            }
        }, {
            text: "Ok",
            id: "confirm_yes",
            click: function () {
                onOk();
                $(this).dialog('destroy').remove();
            }
        }]
    });
}

(function ($) {
    $.extend(jQuery.tmpl.tag, {
        "for": {
            _default: {$2: "var i=1;i<=1;i++"},
            open: 'for ($2){',
            close: '};'
        }
    });

    $.extend(jQuery.tmpl.tag, {
        "var": {
            open: "var $1;"
        }
    });
})(jQuery);



function onResize () {
    var max_height,
        gamearea = $("#gamearea");

    if (is_touch_device) {
        max_height = $(window).height() - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height': max_height, 'max-width': $(window).width() - 35});
    } else {
        max_height = $(window).height() - $("#header").height() -1 - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height': max_height, 'max-width': $(window).width() - 35});
    }
}