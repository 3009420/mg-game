MG_GAME_ONEUP = function ($) {
    return $.extend(MG_GAME_API, {
        wordField:null,
        gameName: 'One Up',
        submitButton:null,
        media:null,
        licence_info:[],
        more_info:null,
        levels:[],
        level:1,
        words:[],
        sound: {},
        sounds: {},
        user: {},
        opponent_id: {},
        endedGames: {},
        opponent_name: {},
        pass_game_id: null,
        institution_id: null,
        back_location: null,
        toastStayTime: 9900,
        toastBackgroundClass: 'popup_gradient',
        /*
         * initialize the game. called from inline script generated by the view
         */
        init: function (options) {
            var settings = $.extend(options, {
                ongameinit: MG_GAME_ONEUP.ongameinit
            });
            MG_GAME_API.game_init(settings);
            var game_assets_uri = $("#game_assets_uri").val();
            //MG_GAME_ONEUP.playSound('showimage');
            MG_GAME_ONEUP.sounds = {
                feedbackbonus: game_assets_uri + 'audio/feedbackbonus.mp3',
                feedbacknormal: game_assets_uri + 'audio/feedbacknormal.mp3',
                feedbackoneupped : game_assets_uri + 'audio/feedbackoneupped.mp3',
                gameresult: game_assets_uri + 'audio/gameresult.mp3',
                newround: game_assets_uri + 'audio/newround.mp3',
                select: game_assets_uri + 'audio/select.mp3',
                showimage: game_assets_uri + 'audio/showimage.mp3',
                submit: game_assets_uri + 'audio/submit.mp3'
            };

            $.each(MG_GAME_ONEUP.sounds, function(index, source) {
                MG_GAME_ONEUP.sound[index] = new Sound(source);
            });

            $(window).resize(function() {
                onResize ();
            });

            $("#fieldholder").hide();

            MG_GAME_ONEUP.wordField = $("#word");

            $('nav#menu-left').mmenu();
            $('nav#menu-right').mmenu({
                position	: 'right',
                counters	: true
            });
        },
        actions: function (action, click_parent) {
            console_log('call for '+ action + " - click from: " + click_parent);
            var continue_action = '';
            $("#header .words").hide();
            $("#header .back").hide();
            switch(action)
            {
                case 'login':
                    $("#register").hide();
                    MG_GAME_ONEUP.setLoginScreen();
                    break;
                case 'register':
                    $("#header").find('.back').show();
                    MG_GAME_ONEUP.back_location = 'login';

                    $('#register input#email').keypress(function (e) {
                        if (e.which == 13) {
                            $('#register #btn_register').click();
                        }
                    });

                    $("#header").find('.back').off('click').on('click', function (e) {
                        e.preventDefault();
                        $("#header").find('.back').hide();
                        MG_GAME_ONEUP.back_location = null;
                        MG_GAME_ONEUP.actions('login', '');
                        return false;
                    });

                    $('#register #btn_register').off('click').on('click', function (e) {
                        e.preventDefault();
                        if ($("#register #username").val().length < 6 && $("#register #password").val().length < 6 && $("#register #email").val().length < 5) {
                            $().toastmessage("showToast", {
                                text: 'All fields are required.',
                                position: "tops-center",
                                type: "notice",
                                background: "white",
                                color: "black",
                                stayTime: MG_GAME_ONEUP.toastStayTime,
                                addClass: MG_GAME_ONEUP.toastBackgroundClass
                            });
                        } else {
                            MG_API.ajaxCall('/user/register', function(response) {
                                    if (response.status === 'ok') {
                                        MG_GAME_ONEUP.actions('login', '');
                                    }
                                    $().toastmessage("showToast", {
                                        text: response.responseText,
                                        position: "tops-center",
                                        type: "notice",
                                        background: "white",
                                        color: "black",
                                        stayTime: MG_GAME_ONEUP.toastStayTime,
                                        addClass: MG_GAME_ONEUP.toastBackgroundClass
                                    });
                                }, {
                                    type: 'post',
                                    data: {
                                        password: $("#register #password").val(),
                                        username: $("#register #username").val(),
                                        email: $("#register #email").val()
                                    }
                                }
                            );
                        }
                    });

                    break;
                case 'account_update':
                    $("#header").find('.back').show();
                    $("#header").find('.setting').hide();
                    $("#account_update").empty();

                    MG_GAME_ONEUP.back_location = 'account';

                    var userSettings = {};
                    userSettings.username = MG_GAME_ONEUP.user.username;
                    userSettings.email = MG_GAME_ONEUP.user.email;

                    $("#template-account_update").tmpl(userSettings).appendTo($("#account_update")).after(function () {
                        $('#register input#email').keypress(function (e) {
                            if (e.which == 13) {
                                $('#account_update #btn_update').click();
                            }
                        });

                        $("#header").find('.back').off('click').on('click', function (e) {
                            e.preventDefault();
                            $("#header").find('.back').hide();
                            MG_GAME_ONEUP.back_location = null;
                            MG_GAME_ONEUP.actions('account', '');
                            return false;
                        });

                        $('#account_update #btn_update').off('click').on('click', function (e) {
                            e.preventDefault();
                            MG_API.ajaxCall('/user/update', function(response) {
                                    if (response.status === 'ok') {

                                    }
                                    $().toastmessage("showToast", {
                                        text: response.message,
                                        position: "tops-center",
                                        type: "notice",
                                        background: "white",
                                        color: "black",
                                        stayTime: MG_GAME_ONEUP.toastStayTime,
                                        addClass: MG_GAME_ONEUP.toastBackgroundClass
                                    });
                                }, {
                                    type: 'post',
                                    data: {
                                        password: $("#account_update #password").val(),
                                        username: $("#account_update #username").val(),
                                        email: $("#account_update #email").val()
                                    }
                                }
                            );
                        });
                    });

                    break;
                case 'main_screen':
                    var confirm_text,
                        opponent_id,
                        opponent_name,
                        this_clicked;
                    $("#challenges").remove();
                    // Response sent is json encode of GameChallengesDTO
                    //http://localhost/mggameserver/index.php/api/multiplayer/getOfflineGames/gid/OneUp/
                    MG_API.ajaxCall('/multiplayer/getOfflineGames/gid/' + MG_GAME_API.settings.gid , function(offline_games) {
                        var length = offline_games.length,
                            your_turn = [],
                            waiting_turn = [],
                            counter_my_turns = 0,
                            counter_waiting_turns = 0;

                        for (var i = 0; i < length; i++) {
                            // its my turn
                            if (parseInt(offline_games[i].turnUserId, 10) === MG_GAME_ONEUP.user.id || parseInt(offline_games[i].turnUserId, 10) === 0) {
                                your_turn[counter_my_turns] = offline_games[i];
                                counter_my_turns++;
                            } else {
                                // its in waiting
                                waiting_turn[counter_waiting_turns] = offline_games[i];
                                counter_waiting_turns++;
                            }
                        }
                        MG_API.ajaxCall('/multiplayer/getChallenges/gid/' + MG_GAME_API.settings.gid , function(challenges_response) {
                            challenges_response.your_turn = your_turn;
                            challenges_response.waiting_turn = waiting_turn;
                            //[{"playedGameId":"48","opponentId":3,"opponentName":"alabala","turnUserId":0}]
                            challenges_response.finished_games = MG_GAME_ONEUP.endedGames;

                            $("#challenges").remove();
                            $("#template-challenges").tmpl(challenges_response).appendTo($("#main_screen")).after(function () {
                                if ((challenges_response.sent.length + challenges_response.waiting_turn.length) === 0) {
                                    $("#challenges_sent").find(".no_value").show();
                                } else {
                                    var that;
                                    // add delete functionality
                                    $("#challenges_sent .delete").off('click').on('click', function () {
                                        this_clicked = $(this);
                                        that = this_clicked.closest(".row");
                                        opponent_id = that.attr('opponent_id');
                                        var playedGameId = that.attr('playedGameId');
                                        opponent_name = that.find('span.username').text();
                                        confirm_text = "Do you really want to end the game with " + opponent_name;
                                        confirmPretty(confirm_text, function () {
                                            if (playedGameId === '') {
                                                // this is a challenge
                                                //http://localhost/mggameserver/index.php/api/multiplayer/rejectChallenge/gid/OneUp/fromUserId/12/toUserId/14
                                                MG_API.ajaxCall('/multiplayer/rejectChallenge/gid/' + MG_GAME_API.settings.gid + '/fromUserId/' + MG_GAME_ONEUP.user.id + '/toUserId/' + opponent_id , function(challenges_response) {
                                                    $("a[location='main_screen']").click();
                                                });
                                            } else {
                                                // game started
                                                MG_API.ajaxCall('/multiplayer/endGame/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + playedGameId , function(challenges_response) {
                                                    $("a[location='main_screen']").click();
                                                });
                                            }
                                        });
                                    });
                                }
                                if ((challenges_response.received.length + challenges_response.your_turn.length) === 0) {
                                    $("#challenges_received").find(".no_value").show();
                                }
                                if ((challenges_response.received.length + challenges_response.your_turn.length + challenges_response.finished_games.length ) > 0) {
                                    $("#challenges_received .delete").off('click').on('click', function () {
                                        var that,
                                            this_clicked = $(this);

                                        that = this_clicked.closest(".row");
                                        opponent_id = that.attr('opponent_id');
                                        opponent_name = that.find('span.username').text();
                                        var playedGameId = that.attr('playedGameId');
                                        if (playedGameId === '') {
                                            confirm_text = "Do you really want to reject the game with " + opponent_name;
                                        } else {
                                            confirm_text = "Do you really want to end the game with " + opponent_name;
                                        }
                                        confirmPretty(confirm_text, function () {
                                            if (playedGameId === '') {
                                                // game not started yet
                                                MG_API.ajaxCall('/multiplayer/rejectChallenge/gid/' + MG_GAME_API.settings.gid + '/fromUserId/' + opponent_id + '/toUserId/' + MG_GAME_ONEUP.user.id + '/', function(challenges_response) {
                                                    $("a[location='main_screen']").click();
                                                });
                                            } else {
                                                // game started
                                                MG_API.ajaxCall('/multiplayer/endGame/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + playedGameId , function(challenges_response) {
                                                    $("a[location='main_screen']").click();
                                                });
                                            }
                                        });
                                    });
                                    $("#challenges_received .start_game").off('click').on('click', function () {
                                        this_clicked = $(this);
                                        var opponent_id = this_clicked.closest(".row").attr('opponent_id');
                                        var start_game = false;

                                        if (this_clicked.attr('type') === 'accept_challenge') {
                                            MG_API.ajaxCall('/multiplayer/acceptChallenge/gid/' + MG_GAME_API.settings.gid + '/opponentId/' + opponent_id, function(response) {
                                                // $playedGameId
                                                MG_GAME_ONEUP.pass_game_id = response.playedGameID;
                                                MG_GAME_ONEUP.opponent_id = opponent_id;
                                                MG_GAME_ONEUP.opponent_name = this_clicked.closest(".row").find('span.username').text();
                                                MG_GAME_ONEUP.actions('game_screen', '');
                                            });
                                        } else if (this_clicked.attr('type') === 'show_final') {
                                            MG_GAME_ONEUP.pass_game_id = this_clicked.closest(".row").attr('playedGameId');
                                            MG_GAME_ONEUP.opponent_id = opponent_id;
                                            MG_GAME_ONEUP.opponent_name = this_clicked.closest(".row").find('span.username').text();
                                            MG_GAME_ONEUP.actions('final_screen', '');
                                        } else {
                                            // next turn
                                            start_game = true;
                                            MG_GAME_ONEUP.pass_game_id = this_clicked.closest(".row").attr('playedGameId');
                                            MG_GAME_ONEUP.opponent_id = opponent_id;
                                            MG_GAME_ONEUP.opponent_name = this_clicked.closest(".row").find('span.username').text();
                                            MG_GAME_ONEUP.actions('game_screen', '');
                                        }
                                    });
                                }
                            });
                        });
                    });
                    break;
                case 'game_screen':
                    $("#game_screen").empty();
                    $("#header").find('.words').show();
                    //game_screen
                    //http://localhost/mggameserver/index.php/api/multiplayer/getOfflineGameState/gid/OneUp/playedGameId/212
                    MG_API.ajaxCall('/multiplayer/getOfflineGameState/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id , function(turn_response) {
                        /**
                         public $tags //GameTagDTO[]
                         {"turns":[{"turn":1,"score":"5","opponentScore":"10","tags":[{"tag":"pool","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null},{"tag":"dfwefwe","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null}],"opponentTags":[{"tag":"rtytr","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null},{"tag":"ergerge","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null},{"tag":"pool","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null}],"media":[{"id":"2","mimeType":"image\/jpeg","imageFullSize":"http:\/\/localhost\/mgc\/www\/\/uploads\/images\/image026.jpg","imageScaled":null,"thumbnail":"http:\/\/localhost\/mgc\/www\/\/uploads\/thumbs\/image026.jpg","videoWebm":null,"videoMp4":null,"audioMp3":null,"audioOgg":null,"licence":{"id":"","name":"","description":""}}],"wordsToAvoid":[]}],"finished":false}
                         */
                        var json = {};
                        json.current_level = turn_response.turns.length;

                        if (json.current_level == 1) {
                            MG_GAME_ONEUP.playSound('showimage');
                        }

                        json.turn = turn_response.turns[(json.current_level -1)];
                        json.opponentName = MG_GAME_ONEUP.opponent_name;
                        var opponentTagCount = turn_response.turns[(json.current_level - 1)].opponentTags.length;
                        if (opponentTagCount === 3) {
                            json.opponentStatus = 'finished';
                        } else {
                            json.opponentStatus = '';
                        }

                        json.num_words = turn_response.turns[(json.current_level - 1)].tags.length;

                        json.current_turn_tag = [];
                        var tags = turn_response.turns[(json.current_level -1)].tags;
                        for (i = 0; i < tags.length; i++) {
                            json.current_turn_tag[i] = {};
                            var tags = turn_response.turns[(json.current_level -1)].tags;
                            json.current_turn_tag[i].div = calculatedRow(tags[i].tag, tags[i].score, json.current_level, MG_GAME_ONEUP.opponent_name);
                        }

                        var tag_count = json.num_words;
                        $("#template-game_screen").tmpl(json).appendTo($("#game_screen")).after(function () {
                            $("#game_screen .blank_bar").off('click').on('click', function () {
                                var that = $(this),
                                    current_tag;
                                that.empty();
                                MG_GAME_ONEUP.playSound('select');
                                that.append('<input type="text" placeholder="ADD A WORD" />');
                                that.find('input').focus();
                                that.find('input').keypress(function (e) {
                                    if (e.which == 13) {
                                        var tag = that.find('input').val(),
                                            new_html;

                                        MG_GAME_ONEUP.playSound('submit');
                                        var validateTag = validTag(that.find('input').val(), turn_response.turns);
                                        if (validateTag === true) {
                                            //'[{"tag":"Test","original":null,"score":null,"weight":null,"mediaId":"6","type":null,"tag_id":null}]';
                                            current_tag = '[{"tag": "' + tag + '", "original":null,"score":null,"weight":null,"mediaId":"' + turn_response.turns[0].media[0].id + '","type":null,"tag_id":null}]';
                                            MG_API.ajaxCall('/multiplayer/submit/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id, function(response) {
                                                    var new_row = {};
                                                    new_row.current_turn_tag = [],
                                                        tags = turn_response.turns[(json.current_level -1)].tags;

                                                    that.replaceWith(calculatedRow(response[0].tag, response[0].score, json.current_level, MG_GAME_ONEUP.opponent_name));
                                                    that.off('click');

                                                    var score_obj = $("#game_screen .you span");
                                                    score_obj.html(parseInt(score_obj.text(), 10) + parseInt(response[0].score, 10, MG_GAME_ONEUP.opponent_name));
                                                    tag_count++;
                                                    if (tag_count === 3) {
                                                        $("#game_screen .round").attr('status', 'waiting').html('WAITING ...');
                                                    }
                                                }, {
                                                    type: 'post',
                                                    data: {
                                                        tags: current_tag
                                                    }
                                                }
                                            );
                                        } else {
                                            $().toastmessage("showToast", {
                                                text: validateTag,
                                                position: "tops-center",
                                                type: "notice",
                                                background: "white",
                                                color: "black",
                                                stayTime: MG_GAME_ONEUP.toastStayTime,
                                                addClass: MG_GAME_ONEUP.toastBackgroundClass
                                            });
                                        }
                                        return false;
                                    }
                                });
                            });

                            $("#header").find('.words').off('click').on('click', function (e) {
                                e.preventDefault();
                                $("#word_screen").empty();
                                $("#header").find('.back').show();
                                $("#header").find('.words').hide();
                                MG_GAME_ONEUP.actions('word_screen', '');
                                return false;
                            });
                        });

                        function validTag (tag, turns) {
                            var i, j, looped_tag;

                            if (tag.length < 2) {
                                return 'Word is not long enough!';
                            }

                            for (i = 0; i < turns.length; i++) {
                                for (j=0; j < turns[i].tags.length; j++) {
                                    if (typeof turns[i].tags[j] !== 'undefined') {
                                        looped_tag = turns[i].tags[j].tag;
                                        if (tag.toLowerCase() === looped_tag.toLowerCase()) {
                                            console_log(j + ' -- ' + turns[i].tags[j].tag);
                                            return 'Tag already in use';
                                        }
                                    }
                                }
                            }
                            return true;
                        }
                    });
                    break;
                case 'final_screen':
                    $("#final_screen").empty();
                    MG_API.ajaxCall('/multiplayer/getOfflineGameState/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id , function(turn_response) {
                        var json = {};
                        json.you = {};
                        json.you.round_1 = '';
                        json.you.round_2 = '';
                        json.you.round_3 = '';

                        json.opponent = {};
                        json.opponent.round_1 = '';
                        json.opponent.round_2 = '';
                        json.opponent.round_3 = '';
                        json.media = turn_response.turns[0].media[0];

                        var current_level = turn_response.turns.length;
                        for (var i = 1; i <= current_level; i++) {
                            for (var j = 0; j < 3; j++) {
                                if (j < turn_response.turns[(i-1)].tags.length) {
                                    var j_tag = turn_response.turns[(i-1)].tags[j];
                                    json.you['round_' + i]+= calculatedRow(j_tag.tag, j_tag.score, i, MG_GAME_ONEUP.opponent_name);
                                } else {
                                    json.you['round_' + i]+= '<div class="small_row blank_bar">SKIPPED WORD</div>';
                                }
                            }
                        }
                        var user = MG_GAME_ONEUP.user;
                        //opponentTags
                        for (var i = 1; i <= current_level; i++) {
                            for (var j = 0; j < 3; j++) {
                                if (j < turn_response.turns[(i-1)].opponentTags.length) {
                                    var j_tag = turn_response.turns[(i-1)].opponentTags[j];
                                    json.opponent['round_' + i]+= calculatedRow(j_tag.tag, j_tag.score, i, user.username);
                                } else {
                                    json.opponent['round_' + i]+= '<div class="small_row blank_bar">SKIPPED WORD</div>';
                                }
                            }
                        }

                        json.current_level = current_level;
                        json.score = turn_response.turns[(current_level-1)].score;
                        json.opponentName = MG_GAME_ONEUP.opponent_name;
                        json.opponentScore = turn_response.turns[(current_level-1)].opponentScore;

                        if (json.score > json.opponentScore) {
                            json.game_result = 'YOU WON!';
                            json.congratulation_text = 'Congratulations! You are the winner.';
                        } else if (json.score < json.opponentScore) {
                            json.game_result = 'YOU LOST!';
                            json.congratulation_text = 'We are sorry but you lost.';
                        } else {
                            json.game_result = 'TIED GAME!';
                            json.congratulation_text = "The game was too close it's a tied game.";
                        }

                        $("#template-final_screen").tmpl(json).appendTo($("#final_screen")).after(function () {
                            $("#final_screen .bookmark_image").off('click').on('click', function () {
                                //http://localhost/mggameserver/index.php/api/multiplayer/bookmark/gid/OneUp/mediaId/1/playedId/1/
                                MG_API.ajaxCall('/multiplayer/bookmark/gid/' + MG_GAME_API.settings.gid + '/mediaId/' + json.media.id + '/playedId/' + MG_GAME_ONEUP.pass_game_id , function(turn_response) {

                                });
                            });

                            $("#final_screen .rematch").off('click').on('click', function () {
                                //http://localhost/mggameserver/index.php/api/multiplayer/challenge/gid/OneUp/username/test
                                MG_API.ajaxCall('/multiplayer/challenge/gid/' + MG_GAME_API.settings.gid + '/username/' + json.opponentName , function(turn_response) {

                                });
                            });
                        });
                    });

                    $("#header").find('.back').off('click').on('click', function (e) {
                        e.preventDefault();
                        $("#header").find('.back').hide();
                        $("#header").find('.words').show();
                        MG_GAME_ONEUP.back_location = 'game_screen';
                        MG_GAME_ONEUP.actions('game_screen', '');
                        return false;
                    });
                    break;
                case 'word_screen':
                    $("#header").find('.back').show();
                    $("#game_screen").empty();
                    MG_API.ajaxCall('/multiplayer/getOfflineGameState/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id , function(turn_response) {
                        var json = {};
                        json.round_1 = '';
                        json.round_2 = '';
                        json.round_3 = '';

                        var current_level = turn_response.turns.length;
                        for (var i = 1; i <= current_level; i++) {
                            for (var j = 0; j < 3; j++) {
                                if (j < turn_response.turns[(i-1)].tags.length) {
                                    var j_tag = turn_response.turns[(i-1)].tags[j];
                                    json['round_' + i]+= calculatedRow(j_tag.tag, j_tag.score, i);
                                } else {
                                    json['round_' + i]+= '<div class="small_row blank_bar">ADD A WORD</div>';
                                }
                            }
                        }
                        json.current_level = current_level;
                        json.score = turn_response.turns[(current_level-1)].score;
                        json.opponentName = MG_GAME_ONEUP.opponent_name;
                        json.opponentScore = turn_response.turns[(current_level-1)].opponentScore;

                        $("#template-word_screen").tmpl(json).appendTo($("#word_screen")).after(function () {

                        });
                    });

                    $("#header").find('.back').off('click').on('click', function (e) {
                        e.preventDefault();
                        $("#header").find('.back').hide();
                        $("#header").find('.words').show();
                        MG_GAME_ONEUP.back_location = 'game_screen';
                        MG_GAME_ONEUP.actions('game_screen', '');
                        return false;
                    });
                    break;
                case 'game_customize':
                    $("#game_customize").find("#listing").remove();
                    $('#new_interest').attr('value', '');

                    $('input#new_interest').keypress(function (e) {
                        if (e.which == 13) {
                            $("#game_customize").find('.note').remove();
                            //http://localhost/mggameserver/index.php/api/multiplayer/addInterest/gid/OneUp/interest/alabala/
                            MG_API.ajaxCall('/multiplayer/addInterest/gid/' + MG_GAME_API.settings.gid + '/interest/' + encodeURIComponent($('#new_interest').val()), function(institution_response) {
                                $('#new_interest').attr('value', '');
                                $("#game_customize").find('.new_interest').append('<div id="note">The interest was added.</div>');
                            });
                            return false;
                        }
                    });
                    //http://localhost/mggameserver/index.php/api/multiplayer/getInstitutions/gid/OneUp/
                    MG_API.ajaxCall('/multiplayer/getInstitutions/gid/' + MG_GAME_API.settings.gid , function(institution_response) {
                        var json = {};
                        json.all_institution = institution_response;
                        $("#template-favorite_institutions").tmpl(json).appendTo($("#game_customize")).after(function () {
                            // add click on an institution
                            // click on an institution
                            $("#list_institutions .institution").off('click').on('click', function (e) {
                                e.preventDefault();
                                var row = $(this);
                                MG_GAME_ONEUP.institution_id = row.attr('institution_id');
                                MG_GAME_ONEUP.back_location = 'game_customize';
                                // institution_info
                                MG_GAME_ONEUP.actions('institution_info', '');

                            });
                        });
                    });

                    break;
                case 'make_challenge':
                    var opponent_name = '';
                    if ($("#find_opponent")) {
                        opponent_name = $("#find_opponent").find('.opponent_name').val();
                    }

                    MG_API.ajaxCall('/multiplayer/challenge/gid/' + MG_GAME_API.settings.gid + '/username/' + opponent_name , function(challenges_response) {
                        if (challenges_response == 'null') {
                            $().toastmessage("showToast", {
                                text: 'Player is not found!',
                                position: "tops-center",
                                type: "notice",
                                background: "white",
                                color: "black",
                                stayTime: MG_GAME_ONEUP.toastStayTime,
                                addClass: MG_GAME_ONEUP.toastBackgroundClass
                            });
                            MG_GAME_ONEUP.actions(location, '');
                        } else {
                            // player is challenged
                            $("a[location='main_screen']").click();
                        }
                        $("#find_opponent").find('.opponent_name').attr('value', '');
                    });
                    break;
                case 'how_to':
                    var swipe_img = $( "#image_gallery"),
                        my_iter = 1,
                        next_iter,
                        numb_img = $( "#image_gallery > div").length;

                    Hammer(swipe_img).on('click', function() { // swiperight
                        next_iter = my_iter + 1;
                        if(next_iter === numb_img) {
                            next_iter = 1;
                        }
                        swipe_images_next (my_iter, next_iter);
                        my_iter = next_iter;
                    });

                    Hammer(swipe_img).on("swiperight", function() { // swiperight
                        next_iter = my_iter + 1;
                        if(next_iter === numb_img) {
                            next_iter = 1;
                        }
                        swipe_images_next (my_iter, next_iter);
                        my_iter = next_iter;
                    });

                    Hammer(swipe_img).on("swipeleft", function() { // swipeleft
                        next_iter = my_iter - 1;
                        if(next_iter === 0) {
                            next_iter = numb_img;
                        }
                        swipe_images_prev (my_iter, next_iter);
                        my_iter = next_iter;
                    });

                function swipe_images_next (my_iter, next_iter) {
                    swipe_img.find("div[number='" + my_iter + "']").hide('slide', {direction: 'left', complete: function () {
                        swipe_img.find("div[number='" + next_iter + "']").show('slide', {direction: 'right'}, 1000);
                    }}, 1000);
                }

                function swipe_images_prev (my_iter, next_iter) {
                    swipe_img.find("div[number='" + my_iter + "']").hide('slide', {direction: 'right', complete: function () {
                        swipe_img.find("div[number='" + next_iter + "']").show('slide', {direction: 'left'}, 1000);
                    }}, 1000);
                }
                    break;
                case 'learn_more':
                    break;
                case 'account':
                    $("#account_playlist").empty();
                    $("#account_interest").empty();
                    $("#account_bookmark").empty();
                    $("#header").find('.setting').show();

                    //getBookmarks
                    MG_API.ajaxCall('/multiplayer/getBookmarks/gid/' + MG_GAME_API.settings.gid , function(account_bookmarks) {
                        var json = {};
                        json.bookmarked = account_bookmarks;
                        $("#template-account_bookmark").tmpl(json).appendTo($("#account_bookmark")).after(function () {
                            function Slider (container ) {
                                this.container = container;
                                this.imgs = container.find('img');
                                this.myImg = container.find('#my_image');
                                this.myImgPaddingLeftValue = parseInt(container.css('padding-left'), 10);
                                if (this.imgs.length > 0) {
                                    this.imgWidth = (this.imgs[0].width || 0) + (this.myImgPaddingLeftValue || 0);
                                } else {
                                    this.imgWidth = 0;
                                }
                                this.windowWidth = $( window ).width();
                                this.allImagesWidth = this.getAllImagesWidth();
                                this.sliderMaxOffset = this.getSliderMaxOffset();
                                this.sliderOffset = 0;

                            };

                            Slider.prototype.getAllImagesWidth = function() { // must be private
                                var tmpSum = 0;
                                var i = 0;
                                for( i ; i<this.imgs.length; i++) {
                                    tmpSum += this.imgs[i].width;
                                }
                                return tmpSum;
                            };


                            Slider.prototype.getSliderMaxOffset = function() { // must be private
                                var tmp = this.allImagesWidth/this.windowWidth;
                                var offset = Math.floor(tmp);
                                return offset;
                            };

                            Slider.prototype.transition = function (direction) {
                                var unit;
                                if(direction === "next" && !(mySlider.sliderOffset < mySlider.sliderMaxOffset)) { // no more images for slide right
                                    return;
                                }
                                if(direction !== "next" && !(mySlider.sliderOffset > 0)) { // no more images for slide left
                                    return;
                                }
                                if(this.windowWidth != 0) {
                                    if(direction === "next") { // clicked on the next button
                                        unit = '-=';
                                        this.sliderOffset++;
                                    }
                                    else {
                                        unit = '+=';
                                        this.sliderOffset--;
                                    }
                                }
                                this.container.animate (
                                    {'margin-left': unit ? (unit + this.windowWidth) : this.windowWidth}
                                )
                            };

                            var container = $('.bookmark');
                            var mySlider = new Slider(container);

                            Hammer(container).off('swipeleft').on("swipeleft", function() { // swipeleft
                                mySlider.transition('next');
                            });

                            Hammer(container).off('swiperight').on("swiperight", function() { // swiperight
                                mySlider.transition( 'previous');
                            });
                            // add zoom to scaled and move swipe_left::swipe_right
                        });
                    });

                    // Interests
                    MG_API.ajaxCall('/multiplayer/getInterests/gid/' + MG_GAME_API.settings.gid , function(account_interest) {
                        var json = {};
                        json.interests = account_interest;
                        $("#template-account_interest").tmpl(json).appendTo($("#account_interest")).after(function () {
                            $("#account_interest .delete").off('click').on('click', function () {
                                var row = $(this).closest('.row');
                                var row_id = row.attr('interest_id');
                                confirmPretty("Do you really want to remove the interest.", function () {
                                    MG_API.ajaxCall('/multiplayer/removeInterest/gid/' + MG_GAME_API.settings.gid + '/id/' + row_id + '/', function(response) {
                                        row.remove();
                                    });
                                })
                            });
                        });
                    });

                    // List of all institutions that are not banned yet
                    MG_API.ajaxCall('/multiplayer/getInstitutions/gid/' + MG_GAME_API.settings.gid , function(account_playlist) {
                        var json = {};
                        json.play_lists = account_playlist;
                        $("#template-account_playlist").tmpl(json).appendTo($("#account_playlist")).after(function () {
                            // click on an institution
                            $("#account_playlist .institution").off('click').on('click', function () {
                                var row = $(this).closest('.row');
                                MG_GAME_ONEUP.institution_id = row.attr('institution_id');
                                MG_GAME_ONEUP.back_location = 'account';
                                // institution_info
                                MG_GAME_ONEUP.actions('institution_info', '');

                            });

                            // delete
                            $("#account_playlist .delete").off('click').on('click', function () {
                                var row = $(this).closest('.row');
                                var row_id = row.attr('institution_id');
                                confirmPretty("Do you really want to disable medias from the institution.", function () {
                                    MG_API.ajaxCall('/multiplayer/banInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + row_id + '/', function(response) {
                                        row.remove();
                                    });
                                })
                            });
                        });
                    });

                    break;
                case 'find_opponent':
                    $('#find_opponent input.opponent_name').keypress(function (e) {
                        if (e.which == 13) {
                            $('#find_opponent .play').click();
                        }
                    });
                    break;
                case 'institution_info':
                    $("#institution_info").empty();
                    $("#header").find('.setting').hide();
                    $("#header").find('.back').show();
                    MG_API.ajaxCall('/multiplayer/GetInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + MG_GAME_ONEUP.institution_id + '/', function(response) {
                        var inst_remove = '<div class="right top_btn favorite" type="remove">REMOVE FROM PLAYLIST</div>',
                            inst_add = '<div class="right top_btn favorite" type="add">FAVORITE</div>';

                        //show_institution
                        $("#template-show_institution").tmpl(response).appendTo($("#institution_info")).after(function () {

                        });
                        if (response[0].isBanned === false) {
                            // Institution is in favorite list
                            $("#header").append(inst_remove);
                        } else {
                            $("#header").append(inst_add);
                        }

                        addClickFav();

                        function addClickFav () {
                            $("#header").find('.favorite').off('click').on('click', function () {
                                $("#header").find('.favorite').remove();
                                if ($(this).attr('type') === 'remove') {
                                    MG_API.ajaxCall('/multiplayer/banInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + MG_GAME_ONEUP.institution_id + '/', function(response) {
                                        setTimeout(function(){}, 3000);
                                        $("#header").append(inst_add);
                                        addClickFav();
                                    });
                                } else {
                                    MG_API.ajaxCall('/multiplayer/unbanInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + MG_GAME_ONEUP.institution_id + '/', function(response) {
                                        setTimeout(function(){}, 3000);
                                        $("#header").append(inst_remove);
                                        addClickFav();
                                    });
                                }
                            });
                        }

                        $("#header").find('.back').off('click').on('click', function (e) {
                            e.preventDefault();
                            $("#header").find('.back').hide();
                            $("#header").find('.favorite').remove();
                            $("#header").find('.setting').show();
                            click_parent = MG_GAME_ONEUP.back_location;
                            $("a[location='" + MG_GAME_ONEUP.back_location + "']").click();
                            return false;
                        });
                    });
                    break;
                default:
                    console_log('action is unknown');
                    break;
            }

            if (click_parent === '') {
                $("#content div:visible:eq(0)").hide();
                $("#" + action).slideUp().show();
            }
        },
        setClick: function () {
            $("#content a[href='#']").off('click').on('click', function(e) {
                e.preventDefault();
                var location = $(this).attr('location');
                if (location != undefined) {
                    var location = $(this).attr('location');
                    $("#content div:visible:eq(0)").hide();
                    MG_GAME_ONEUP.actions(location, '');
                }
                return false;
            });
        },
        validUser: function () {
            MG_API.curtain.show();
            yepnope([
                {
                    load: [
                        MG_INIT.nodeJSUrl + '/socket.io/socket.io.js'
                    ],
                    complete: function(){
                        if (typeof io === 'undefined') {
                            alert('Contact Administrator. Error node.');
                        } else {
                            MG_API.curtain.hide();
                            MG_GAME_ONEUP.nodeInit();
                            $("#header .setting").show();
                            // Called just after sharedSecret is triggered
                            ///api/multiplayer/register/gid/OneUp/
                            MG_API.ajaxCall('/multiplayer/register/gid/' + MG_GAME_API.settings.gid , function(response) {
                                MG_GAME_ONEUP.user = response.user;

                                MG_API.ajaxCall('/multiplayer/getEndedGames/gid/' + MG_GAME_API.settings.gid , function(response) {
                                    MG_GAME_ONEUP.endedGames = response;
                                });

                                $("#main_screen").find(".username").html(response.user.username);

                                $("a[location='main_screen']").on('click', function (){
                                    MG_GAME_ONEUP.actions('main_screen', 'menu');
                                });

                                $("a[location='game_customize']").on('click', function (){
                                    MG_GAME_ONEUP.actions('game_customize', 'menu');
                                });

                                $("a[location='how_to']").on('click', function (){
                                    MG_GAME_ONEUP.actions('how_to', 'menu');
                                });

                                $("a[location='learn_more']").on('click', function (){
                                    MG_GAME_ONEUP.actions('learn_more', 'menu');
                                });

                                $("a[location='account']").on('click', function (){
                                    MG_GAME_ONEUP.actions('account', 'menu');
                                });

                                $("a[location='main_screen']").click();

                            });
                        }
                    }
                }
            ]);
        },

        setLoginScreen: function () {
            $("#login").show();
            $("#header .setting").hide();
            $("#btn_login").off('click').on('click', function (e) {
                e.preventDefault();
                if ($("#login #username").val().length + $("#login #password").val().length < 1) {
                    alert("Username and passwords are required!");
                } else {
                    //user/gameLogin/
                    //MG_API.ajaxCall('/user/login/', function(response) {
                    MG_API.ajaxCall('/user/login', function(response) {
                            if (response.status === 'ok') {
                                MG_GAME_ONEUP.validUser();
                            } else {
                                $().toastmessage("showToast", {
                                    text: 'Wrong username or password.',
                                    position: "tops-center",
                                    type: "notice",
                                    background: "white",
                                    color: "black",
                                    stayTime: MG_GAME_ONEUP.toastStayTime,
                                    addClass: MG_GAME_ONEUP.toastBackgroundClass
                                });
                            }
                        }, {
                            type: 'post',
                            data: {
                                password: $("#login #password").val(),
                                login: $("#login #username").val()
                            }
                        }
                    );
                }
                return false;
            });
        },
        /*
         REGISTER USER AS ONLINE TO GAME SERVER
         */
        onapiinit: function () {
            MG_GAME_API.curtain.hide();
            MG_GAME_ONEUP.setClick();
            if (MG_INIT.isLogged === 'true') {
                MG_GAME_ONEUP.validUser();
            } else {
                MG_GAME_ONEUP.setLoginScreen();
            }
        },
        playSound: function (index) {
            MG_GAME_ONEUP.sound[index].play(MG_GAME_ONEUP.sounds[index]);
        },
        nodeInit: function () {
            var socket = io.connect("'" + MG_INIT.nodeJSUrl + "'"),
                game_title = '<b>' + MG_GAME_ONEUP.gameName + '</b> ';

            socket.on('reconnect', function () {
                console_log('Reconnected to the server');
                socket.emit('register', MG_API.settings.shared_secret, MG_GAME_API.settings.gid);
            });

            socket.on('registerFailure', function(data) {
                console_log(data);
                console_log('registerFailure');
                //TODO what to do in this case
            });

            socket.on('challenge', function(data) {
                //Receive challenge from game player
                // data is JSON encoded object GameUserDTO
                var response = JSON.parse(data.payload);
                console_log(response);
                $().toastmessage("showToast", {
                    text: game_title + response.username + ' challenged you to a game!',
                    position: "tops-center",
                    type: "notice",
                    background: "white",
                    color: "black",
                    stayTime: MG_GAME_ONEUP.toastStayTime,
                    addClass: MG_GAME_ONEUP.toastBackgroundClass
                });
                if ($("#main_screen").is(":visible")) {
                    $("a[location='main_screen']").click();
                }
            });

            socket.on('rejectChallenge', function(data) {
                // Receive reject challenge from game player
                // data is JSON encoded object GameUserDTO
                var response = JSON.parse(data.payload);
                console_log(response);
                $().toastmessage("showToast", {
                    text: game_title + response.username + ' turned down your challenge.',
                    position: "tops-center",
                    type: "notice",
                    background: "white",
                    color: "black",
                    stayTime: MG_GAME_ONEUP.toastStayTime,
                    addClass: MG_GAME_ONEUP.toastBackgroundClass
                });
                if ($("#main_screen").is(":visible")) {
                    $("a[location='main_screen']").click();
                }
            });

            socket.on('newTurn', function(data) {
                // Receive information when new turn is created
                // data is JSON encoded object GameTurnDTO
                var response = JSON.parse(data.payload);
                console_log('Receive information when new turn is created');

                if($("#game_screen").is(":visible")) {
                    if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10) &&
                        ($("#game_screen .round").attr('status') === 'waiting' || $("#game_screen .round").attr('opponent') === 'finished')) {
                        MG_GAME_ONEUP.actions('game_screen', '');
                        MG_GAME_ONEUP.playSound('newround');
                    }
                } else if ($(".index_screen").not(":visible")) {
                    if ($("#main_screen").is(":visible")) {
                        $("a[location='main_screen']").click();
                    }
                    $().toastmessage("showToast", {
                        text: game_title + " It's your turn!",
                        position: "tops-center",
                        type: "notice",
                        background: "white",
                        color: "black",
                        stayTime: MG_GAME_ONEUP.toastStayTime,
                        addClass: MG_GAME_ONEUP.toastBackgroundClass
                    });
                }
            });

            socket.on('gameEnd', function(data) {
                // Receive when the game end i.e. no more turns
                // data is JSON encoded integer of played game id
                console_log('Game End is fired!');
                var response = JSON.parse(data.payload);
                console_log(response);

                if($("#game_screen").is(":visible")) {
                    if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10)) {
                        MG_GAME_ONEUP.actions('final_screen', '');
                        MG_GAME_ONEUP.playSound('gameresult');
                    }
                } else if ($(".index_screen").not(":visible")) {
                    // need to add line
                    var counter = MG_GAME_ONEUP.endedGames.length;
                    MG_GAME_ONEUP.endedGames[counter] = {};
                    MG_GAME_ONEUP.endedGames[counter].playedGameId = response.playedGameId;
                    MG_GAME_ONEUP.endedGames[counter].opponentId = response.id;
                    MG_GAME_ONEUP.endedGames[counter].opponentName = response.username;
                    MG_GAME_ONEUP.endedGames[counter].turnUserId = 0;

                    if ($("#main_screen").is(":visible")) {
                        $("a[location='main_screen']").click();
                    }
                }
            });

            socket.on('penalty', function(data) {
                // Receive penalty
                // data is JSON encoded negative integer of penalty scores
                var response = JSON.parse(data.payload);
                console_log(response);

                if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10)) {
                    $().toastmessage("showToast", {
                        text: game_title + " You got " + MG_GAME_ONEUP.opponent_name + " 's point with " + response.tag.tag,
                        position: "tops-center",
                        type: "notice",
                        background: "white",
                        color: "black",
                        stayTime: MG_GAME_ONEUP.toastStayTime,
                        addClass: MG_GAME_ONEUP.toastBackgroundClass
                    });
                    var current_points = parseInt($("#game_screen .you span").text(), 10);
                    $("#game_screen .you span").html((current_points + 1));
                    $("#game_screen .words").find("div[tag='" + response.tag.tag + "']").replaceWith(calculatedRow (response.tag.tag, response.tag.score, $("#game_screen .round span").text(), MG_GAME_ONEUP.opponent_name));
                }
            });

            socket.on('bonus', function(data) {
                // Receive bonus points
                // data is JSON encoded integer of bonus scores
                var response = JSON.parse(data.payload);
                console_log(response);

                $().toastmessage("showToast", {
                    text: game_title + ' ' + response.opponentName + " got your points with " + response.tag.tag + "!",
                    position: "tops-center",
                    type: "notice",
                    background: "white",
                    color: "black",
                    stayTime: MG_GAME_ONEUP.toastStayTime,
                    addClass: MG_GAME_ONEUP.toastBackgroundClass
                });

                if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10)) {
                    var current_points = parseInt($("#game_screen .you span").text(), 10);
                    $("#game_screen .you span").html((current_points - 1));
                    $("#game_screen .words").find("div[tag='" + response.tag.tag + "']").replaceWith(calculatedRow (response.tag.tag, response.tag.score, $("#game_screen .round span").text(), MG_GAME_ONEUP.opponent_name));
                }
            });

            socket.on('opponentWaiting', function(data) {
                // Receive notification that opponent finished his turn and waiting for you
                // data is JSON encoded integer of played game id
                var response = JSON.parse(data.payload);
                console_log('opponentWaiting');
                console_log(response);

                if ($("#main_screen").is(":visible")) {
                    $().toastmessage("showToast", {
                        text: game_title + " It's your turn! opponentWaiting",
                        position: "tops-center",
                        type: "notice",
                        background: "white",
                        color: "black",
                        stayTime: MG_GAME_ONEUP.toastStayTime,
                        addClass: MG_GAME_ONEUP.toastBackgroundClass
                    });
                    $("a[location='main_screen']").click();
                } else if($("#game_screen").is(":visible")) {
                    if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10)) {
                        $().toastmessage("showToast", {
                            text: game_title + ' ' + response.username + " finished his turn.",
                            position: "tops-center",
                            type: "notice",
                            background: "white",
                            color: "black",
                            stayTime: MG_GAME_ONEUP.toastStayTime,
                            addClass: MG_GAME_ONEUP.toastBackgroundClass
                        });
                        $("#game_screen .round").attr('opponent', 'finished')
                    }
                }

            });

            socket.emit('register', MG_API.settings.shared_secret, MG_GAME_API.settings.gid);

        },
        /*
         * display games turn
         */
        renderTurn: function (response) {
            console_log('Render turn');
        },

        /*
         * display the final turn
         */
        renderFinal:function () {
            console_log('Game over');
        },

        /*
         * evaluate each response from /api/games/play calls (POST or GET)
         */
        onresponse:function (response) {
            console_log('response');
        },


        /*
         * on callback for the submit button
         */
        onsubmit:function () {
            console_log('onsubmit');
            return false;
        },
        /*
         * this method appears to be not used
         */
        submit:function () {
            console_log('submit');
            return false;
        },

        /*
         * process /api/games/play get request responses
         */
        ongameinit:function (response) {

        },

        liftOff:function () {
            MG_GAME_ONEUP.renderFinal();
        },

        nextlevel:function (skip) {
        }
    });
}(jQuery);

function confirmPretty(text, onOk) {
    $("<div title='Confirmation'>" + text + "</div>").dialog({
        modal: true,
        dialogClass: 'no-title',
        buttons: [{
            text: "Cancel",
            id: "confirm_no",
            click: function () {
                $(this).dialog('destroy').remove();
            }
        }, {
            text: "Ok",
            id: "confirm_yes",
            click: function () {
                onOk();
                $(this).dialog('destroy').remove();
            }
        }]
    });
}

(function ($) {
    $.extend(jQuery.tmpl.tag, {
        "for": {
            _default: {$2: "var i=1;i<=1;i++"},
            open: 'for ($2){',
            close: '};'
        }
    });

    $.extend(jQuery.tmpl.tag, {
        "var": {
            open: "var $1;"
        }
    });
})(jQuery);

function calculatedRow (tag, score, current_level, opponent_name) {
    var new_html,
        html_class;
    if (score === null) {
        score = 1;
    }

    if (parseInt(score, 10) === 1 && current_level === 1) {
        html_class = 'standard_bar';
        new_html = '<span>+1</span>' + tag;
        MG_GAME_ONEUP.playSound('feedbacknormal');
    } else if (parseInt(score, 10) === 1 && current_level !== 1) {
        html_class = 'up_bar';
        new_html = '<span>+1</span>' + tag + '<span class="bar_right">YOU GOT<br/>' + opponent_name + '<br/>POINT!</span>';
        MG_GAME_ONEUP.playSound('feedbackoneupped');
    } else if (score === -1) {
        html_class = 'upped_bar';
        new_html = '<span>-1</span>' + tag + '<span class="bar_right">' + opponent_name + '<br/>GOT YOUR<br/>POINT!</span>';
    } else if (parseInt(score, 10) === 3) {
        html_class = 'bonus_bar';
        new_html = '<span>+3</span>' + tag + '<span class="bar_right" style="padding-top: 5px;">GREAT<br/>WORD!</span>';
        MG_GAME_ONEUP.playSound('feedbacknormal');
    } else if (parseInt(score, 10) === 4) {
        html_class = 'bonus_bar';
        new_html = '<span>+4</span>' + tag + '<span class="bar_right" style="padding-top: 5px;">GREAT<br/>WORD!</span>';
        MG_GAME_ONEUP.playSound('feedbacknormal');
    } else if (parseInt(score, 10) === 2) {
        html_class = 'bonus_bar';
        new_html = '<span>+2</span>' + tag;
        MG_GAME_ONEUP.playSound('feedbacknormal');
    } else {
        html_class = 'standard_bar';
        new_html = '<span>' + score + '</span>' + tag;
    }

    return '<div class="small_row ' + html_class + '" tag="' + tag + '">' + new_html + '</div>';
}

function onResize () {
    var max_height,
        gamearea = $("#gamearea");

    if (is_touch_device) {
        max_height = $(window).height() - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height': max_height, 'max-width': $(window).width() - 35});
    } else {
        max_height = $(window).height() - $("#header").height() -1 - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height': max_height, 'max-width': $(window).width() - 35});
    }
}

function console_log (logged_text) {
    if (Modernizr.development_mode) {
        console.log(logged_text);
    }
}