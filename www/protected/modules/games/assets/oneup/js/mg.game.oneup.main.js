MG_GAME_ONEUP = function ($) {
    return $.extend(MG_GAME_API, {
        wordField:null,
        submitButton:null,
        media:null,
        licence_info:[],
        more_info:null,
        levels:[],
        level:1,
        words:[],
        sound: {},
        sounds: {},
        /*
         * initialize the game. called from inline script generated by the view
         */
        init: function (options) {
            var settings = $.extend(options, {
                ongameinit: MG_GAME_ONEUP.ongameinit
            });
            MG_GAME_API.game_init(settings);
            var game_assets_uri = $("#game_assets_uri").val();

            MG_GAME_ONEUP.sounds = {
                fail_sound: game_assets_uri + 'audio/sound_fail.mp3',
                next_level: game_assets_uri + 'audio/nextlevel.mp3',
                try_again : game_assets_uri + 'audio/tryagain.mp3'
            };

            $.each(MG_GAME_ONEUP.sounds, function(index, source) {
                MG_GAME_ONEUP.sound[index] = new Sound(source);
            });

            $(window).resize(function() {
                onResize ();
            });

            $("#fieldholder").hide();

            MG_GAME_ONEUP.wordField = $("#word");

            $('nav#menu-left').mmenu();
            $('nav#menu-right').mmenu({
                position	: 'right',
                counters	: true
            });
        },
        actions: function (action, click_parent) {
            console.log('call for '+ action);
            var continue_action = '';
            switch(action)
            {
                case 'main_screen':
                    $("#challenges").empty();
                    // Response sent is json encode of GameChallengesDTO
                    // TODO - wrong api responce
                    MG_API.ajaxCall('/multiplayer/getChallenges/gid/' + MG_GAME_API.settings.gid , function(challenges_response) {
                        challenges_response = {};
                        challenges_response.sent = [];
                        challenges_response.sent[0] = {'opponent_id': 2, 'opponent_name': 'alabala'};

                        challenges_response.received = [];
                        challenges_response.received[0] = {'opponent_id': 3, 'opponent_name': 'portokala'};
                        challenges_response.received[1] = {'opponent_id': 4, 'opponent_name': 'portokala1'};
                        challenges_response.received[2] = {'opponent_id': 5, 'opponent_name': 'portokala2'};
                        $("#template-challenges").tmpl(challenges_response).appendTo($("#main_screen")).after(function () {
                            if (challenges_response.sent.length === 0) {
                                $("#challenges_sent").find(".no_value").show();
                            }
                            if (challenges_response.received.length === 0) {
                                $("#challenges_received").find(".no_value").show();
                            }
                        });
                    });
                    break;
                case 'game_customize':
                    $("#game_customize").find("#list_institutions").remove();
                    // user is REGISTER USER AS ONLINE TO GAME SERVER
                    /*
                     Return is JSON STRING
                     GameDTO
                     GameUserDTO
                     */
                    var institution_response = {};
                    institution_response.institution = [];
                    institution_response.institution[0] = {'id': 3, 'name': 'portokala1', 'logo': '/images/video_ico.png'};
                    institution_response.institution[1] = {'id': 4, 'name': 'portokala2', 'logo': '/images/video_ico.png'};
                    institution_response.institution[2] = {'id': 5, 'name': 'portokala3', 'logo': '/images/video_ico.png'};
                    $("#template-favorite_institutions").tmpl(institution_response).appendTo($("#game_customize")).after(function () {

                    });
                    /*
                     // TODO - Missing api responce - get institutions
                     MG_API.ajaxCall('/multiplayer/xxxx/gid/' + MG_GAME_API.settings.gid , function(institution_response) {
                     $("#template-challenges").tmpl(institution_response).appendTo($("#main_screen")).after(function () {

                     });
                     });
                     */
                    break;
                case 'make_challenge':
                    var opponent_name = '';
                    if ($("#find_opponent").is(':visible')) {
                        opponent_name = $("#find_opponent").find('.opponent_name').val();
                    }

                    MG_API.ajaxCall('/multiplayer/challenge/gid/' + MG_GAME_API.settings.gid + '/username' + opponent_name , function(challenges_response) {
                        if (challenges_response === NULL) {
                            // TODO case player not valid - might switch action
                            // TODO warning in case player is not valid
                            alertPretty('Player is not ');
                            MG_GAME_ONEUP.actions(location, '');
                        } else {
                            // player is challenged
                            $("a[location='main_screen']").click();
                        }
                    });
                    break;
                default:
                    console.log('action is unknown');
                    break;
            }

            if (click_parent === '') {
                $("#content div:visible:eq(0)").hide();
                $("#" + action).slideUp().show();
            }
        },
        /*
         REGISTER USER AS ONLINE TO GAME SERVER
         */
        onapiinit: function () {
            // Called just after sharedSecret is triggered
            ///api/multiplayer/register/gid/OneUp/
            MG_API.ajaxCall('/multiplayer/register/gid/' + MG_GAME_API.settings.gid , function(response) {
                $("#content a[href='#']").on('click', function(e) {
                    var location = $(this).attr('location');
                    if (location !== undefined) {
                        e.preventDefault();
                        var location = $(this).attr('location');
                        $("#content div:visible:eq(0)").hide();
                        MG_GAME_ONEUP.actions(location, '');
                    }
                });
                $("#main_screen").find(".username").html(response.user.username);

                $("a[location='main_screen']").on('click', function (){
                    MG_GAME_ONEUP.actions('main_screen', 'menu');
                });

                $("a[location='game_customize']").on('click', function (){
                    MG_GAME_ONEUP.actions('game_customize', 'menu');
                });

                $("a[location='main_screen']").click();
                MG_GAME_API.curtain.hide();

            });
        },
        playSound: function (index) {
            MG_GAME_ONEUP.sound[index].play(MG_GAME_ONEUP.sounds[index]);
        },
        /*
         * display games turn
         */
        renderTurn: function (response) {

        },

        /*
         * display the final turn
         */
        renderFinal:function () {
        },

        /*
         * evaluate each response from /api/games/play calls (POST or GET)
         */
        onresponse:function (response) {
            console.log('response');
        },


        /*
         * on callback for the submit button
         */
        onsubmit:function () {
            console.log('onsubmit');
            return false;
        },
        /*
         * this method appears to be not used
         */
        submit:function () {
            console.log('submit');
            return false;
        },

        /*
         * process /api/games/play get request responses
         */
        ongameinit:function (response) {
            console.log('init');
            // send ajax call as POST request to validate a turn
            MG_API.ajaxCall('/api/multiplayer/register/gid/' + MG_GAME_API.settings.gid, function (response) {
                console.log(response);
            }, {
                type:'post',
                data:{ }
            });
//            MG_GAME_ONEUP.onresponse(response);
        },

        liftOff:function () {
            MG_GAME_ONEUP.renderFinal();
        },

        nextlevel:function (skip) {
        }
    });
}(jQuery);


function onResize () {
    var max_height,
        gamearea = $("#gamearea");

    if (is_touch_device) {
        max_height = $(window).height() - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height': max_height, 'max-width': $(window).width() - 35});
    } else {
        max_height = $(window).height() - $("#header").height() -1 - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height': max_height, 'max-width': $(window).width() - 35});
    }
}