<?php
/**
 * This is the implentation of the wordstoavoid functionality
 */

class WordsToAvoidPlugin extends MGDictionaryPlugin
{
    public $enableOnInstall = true;
    public $hasAdmin = true;

    /**
     * Parses the submission and regiesters for each of the previous turns images the
     * words that have been set as words to avoid. We can't regenerate the wordstoavoid
     * as in meantime the list might have changed. We have to use the words the player has
     * seen.
     *
     * @param object $game the game object
     * @param object $game_model the active model of the current game
     * @return boolean true if the validation after parsing was successful
     */
    function parseSubmission(&$game, &$game_model)
    {
        $game->request->wordstoavoid = array();
        if (isset($_POST["wordstoavoid"]) && is_array($_POST["wordstoavoid"]) && count($_POST["wordstoavoid"]) > 0) {
            foreach ($_POST["wordstoavoid"] as $image_id => $image) {
                if (is_array($image) && count($image) > 0) {
                    $game->request->wordstoavoid[$image_id] = $image;
                }
            }
        }
        return true;
    }

    /**
     * Checks if the tags submitted are on the wordstoavoid list. If they do set the
     * weight to 0 and the tags type to wordstoavoid.
     *
     * @param MGGameModel $gameModel
     * @param array $tags the tags to be looked up as a single dimension array array('tag1', 'tag2', ...)
     * #
     */
    function setWeights(&$gameModel, $tags)
    {
        // go through last turns words to avoid and weight matching tags 0
        if (isset($gameModel->wordstoavoid) && is_array($gameModel->wordstoavoid)) {
            foreach ($gameModel->wordstoavoid as $wta_image_id => $wta_image) {
                if (array_key_exists($wta_image_id, $tags)) {
                    foreach ($wta_image as $wta_tag_id => $wta_tag) {
                        if (array_key_exists($wta_tag["tag"], $tags[$wta_image_id])) {
                            $tags[$wta_image_id][$wta_tag["tag"]]["type"] = 'wordstoavoid';
                            $this->adjustWeight($tags[$wta_image_id][$wta_tag["tag"]], 0);
                        }
                    }
                }
            }
        }
        return $tags;
    }

    /**
     * Retrieves the wordstoavoid for the images passed on. Making use of
     * MGTags::getTagsByWeightThreshold(...) and a words to avoid threshold set on the
     * plugin's setting page.
     *
     * See MGTags::saveTags for the data structure of the $tags array
     *
     * The format of &$wordsToAvoid is
     * array(
     *  image_id = array(
     *    tag_id => array(
     *      "tag" => "tag" // tag == the word to avoid
     *      "total" => "SUM(tu.weight)" // this is just additional info provided by MGTags::getTagsByWeightThreshold(...)
     *    )
     *    ...
     *  )
     *  ...
     * )
     *
     * @param array $wordsToAvoid the words to avoid generated by MGTags::getTagsByWeightThreshold(...)
     * @param array $used_images array of image_ids that will be used in this turn
     */
    function wordsToAvoid(&$wordsToAvoid, &$used_images)
    {
        $model = new WordsToAvoid;
        $model->fbvLoad();
        $wordsToAvoid = MGTags::getTagsByWeightThreshold($used_images, $model->words_to_avoid_threshold);
    }

    /**
     * Ensures that the needed settings are saved in the setting file
     */
    function install()
    {
        $model = new WordsToAvoid;
        $model->fbvSave();
    }
}
